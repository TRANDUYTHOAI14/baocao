%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 1402.i017.005.S.m004.c11.logistics icons blue and orange set [преобразованный].eps
%%Creator: Adobe Illustrator(R) 16.2
%%For: galina
%%CreationDate: 2/20/2014
%%BoundingBox: 0 0 450 450
%%HiResBoundingBox: 0 0 450 450
%%CropBox: 0 0 450 450
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 16.2.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 16.2.0 x723 R agm 4.6676 ct 5.2594%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="п»ї" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.3-c011 66.145661, 2012/02/06-14:56:27        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">TEMPLATE</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:MetadataDate>2014-02-20T16:42:15+02:00</xmp:MetadataDate>
         <xmp:ModifyDate>2014-02-20T16:42:15+02:00</xmp:ModifyDate>
         <xmp:CreateDate>2014-02-20T16:42:14+02:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS6 (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FUJdaxpdozrcXUcRjoZAzD4a9OXhXtXrmNl1uHGSJSArn5e/9He349Nkn9MSbW6XrOmapHJJY&#xA;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&#xA;KuxV2KuxV2KuxV//2Q==</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:InstanceID>xmp.iid:CF6FE8303D9AE311940AF58D19F30932</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:CF6FE8303D9AE311940AF58D19F30932</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:F6DC7B98FF99E3119611F59D55AD4A1B</stRef:instanceID>
            <stRef:documentID>xmp.did:F6DC7B98FF99E3119611F59D55AD4A1B</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:2D0415649257E311B06FF5AD3D9C4AF6</stEvt:instanceID>
                  <stEvt:when>2013-11-27T23:33:20+05:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F6DC7B98FF99E3119611F59D55AD4A1B</stEvt:instanceID>
                  <stEvt:when>2014-02-20T13:24:45+06:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:CF6FE8303D9AE311940AF58D19F30932</stEvt:instanceID>
                  <stEvt:when>2014-02-20T16:42:15+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS6 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>450.000000</stDim:w>
            <stDim:h>450.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Р“СЂСѓРїРїР° РѕР±СЂР°Р·С†РѕРІ РїРѕ СѓРјРѕР»С‡Р°РЅРёСЋ</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -450 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 450 li
450 450 li
450 0 li
cp
clp
450 450 mo
0 450 li
0 0 li
450 0 li
450 450 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
f
63.7554 155.041 mo
63.7549 155.04 li
37.644 161.313 li
56.0083 177.203 li
63.7554 174.667 li
63.7554 155.041 li
cp
0 .560784 .819608 rgb
f
56.9336 202.872 mo
86.1025 193.305 li
86.1025 177.397 li
72.312 182.543 li
57.7246 178.094 li
56.9336 178.356 li
56.9336 202.872 li
cp
f
39.2319 178.329 mo
55.2866 179.456 li
55.2866 202.558 li
37.644 187.268 li
37.644 176.868 li
39.2319 178.329 li
cp
f
58.7539 177.752 mo
72.0669 181.229 li
101.824 170.448 li
88.8076 167.821 li
58.7539 177.752 li
cp
1 .54902 0 rgb
f
55.2866 178.329 mo
39.4478 177.203 li
22.1128 159.754 li
36.9385 162.176 li
55.2866 178.329 li
cp
f
65.0488 154.374 mo
75.2036 146.964 li
97.394 158.569 li
86.9849 166.488 li
65.0488 154.374 li
cp
f
63.6704 153.922 mo
58.7539 144.783 li
32.1416 150.649 li
37.1133 160.284 li
63.6704 153.922 li
cp
f
373.999 80.2983 mo
371.649 80.2983 369.745 78.3936 369.745 76.0439 cv
369.745 73.6943 371.649 71.7896 373.999 71.7896 cv
376.349 71.7896 378.253 73.6943 378.253 76.0439 cv
378.253 78.3936 376.349 80.2983 373.999 80.2983 cv
cp
373.999 69.9658 mo
370.643 69.9658 367.921 72.6875 367.921 76.0439 cv
367.921 79.4004 370.643 82.1216 373.999 82.1216 cv
377.355 82.1216 380.077 79.4004 380.077 76.0439 cv
380.077 72.6875 377.355 69.9658 373.999 69.9658 cv
cp
0 .560784 .819608 rgb
f
415.242 80.2983 mo
412.893 80.2983 410.987 78.3936 410.987 76.0439 cv
410.987 73.6943 412.893 71.7896 415.242 71.7896 cv
417.592 71.7896 419.497 73.6943 419.497 76.0439 cv
419.497 78.3936 417.592 80.2983 415.242 80.2983 cv
cp
415.242 69.9658 mo
411.886 69.9658 409.165 72.6875 409.165 76.0439 cv
409.165 79.4004 411.886 82.1216 415.242 82.1216 cv
418.599 82.1216 421.319 79.4004 421.319 76.0439 cv
421.319 72.6875 418.599 69.9658 415.242 69.9658 cv
cp
f
359.806 80.2983 mo
357.456 80.2983 355.552 78.3936 355.552 76.0439 cv
355.552 73.6943 357.456 71.7896 359.806 71.7896 cv
362.155 71.7896 364.06 73.6943 364.06 76.0439 cv
364.06 78.3936 362.155 80.2983 359.806 80.2983 cv
cp
359.806 69.9658 mo
356.448 69.9658 353.728 72.6875 353.728 76.0439 cv
353.728 79.4004 356.448 82.1216 359.806 82.1216 cv
363.162 82.1216 365.884 79.4004 365.884 76.0439 cv
365.884 72.6875 363.162 69.9658 359.806 69.9658 cv
cp
f
396.137 40.5625 mo
352.669 40.5625 li
351.063 40.5625 349.749 41.8765 349.749 43.4824 cv
349.749 73.124 li
349.749 73.9277 349.977 74.7832 350.608 75.1836 cv
351.964 76.0439 352.278 74.4434 352.505 73.729 cv
353.485 70.6304 356.382 68.3843 359.806 68.3843 cv
362.062 68.3848 364.087 69.3604 365.487 70.9131 cv
366.081 71.5718 367.674 71.6509 368.226 71.0156 cv
369.629 69.4038 371.694 68.3838 373.999 68.3843 cv
377.46 68.3843 380.319 70.7017 381.335 73.8335 cv
381.769 75.1694 382.973 76.0439 383.8 76.0439 cv
387.091 76.0439 396.137 76.0439 396.137 76.0439 cv
397.743 76.0439 399.057 74.73 399.057 73.124 cv
399.057 43.4824 li
399.057 41.8765 397.743 40.5625 396.137 40.5625 cv
cp
f
415.956 60.6367 mo
406.687 60.6367 li
405.08 60.6367 403.767 59.3228 403.767 57.7168 cv
403.767 53.7344 li
403.767 52.1284 404.72 50.8145 406.325 50.8145 cv
407.254 50.8145 li
408.86 50.8145 409.946 50.8579 411.671 51.1113 cv
412.987 51.3047 414.229 52.0596 416.298 55.04 cv
417.478 56.7407 417.899 57.8384 418.062 59.0044 cv
418.202 60.0181 417.563 60.6367 415.956 60.6367 cv
cp
426.859 70.7173 mo
426.63 63.5645 423.437 64.3442 421.488 59.5015 cv
417.438 49.4307 413.541 48.0752 408.104 48.0752 cv
405.044 48.0752 403.37 48.0752 403.37 48.0752 cv
401.946 48.0752 401.231 49.46 401.231 51.0659 cv
401.231 73.1714 li
401.231 74.7773 402.546 76.0669 404.151 76.0356 cv
404.151 76.0356 404.819 75.9761 405.896 76.0098 cv
406.99 76.0439 407.659 74.8433 407.785 74.2998 cv
408.573 70.9102 411.612 68.3838 415.242 68.3843 cv
418.659 68.3848 421.505 70.6382 422.534 73.7148 cv
422.989 75.0737 423.947 75.4966 424.442 75.4336 cv
425.36 75.3174 425.735 74.7422 426.149 74.1714 cv
426.97 74.0366 427.608 73.2476 427.608 72.2935 cv
427.608 71.6401 427.311 71.0615 426.859 70.7173 cv
cp
1 .54902 0 rgb
f
91.3862 63.9912 mo
90.6128 62.8228 li
90.269 62.3052 89.5649 62.1616 89.0474 62.5049 cv
88.7007 62.7344 li
89.4321 64.125 89.9321 65.3892 90.2798 66.5356 cv
91.0679 65.5571 li
91.5854 65.2129 91.729 64.5088 91.3862 63.9912 cv
cp
0 .560784 .819608 rgb
f
85.8892 60.126 mo
82.3696 62.3335 78.6704 64.4507 74.9019 66.4805 cv
81.9048 70.2422 89.561 74.3418 89.561 74.3418 cv
89.561 74.3418 92.1177 69.126 85.896 60.1367 cv
85.8931 60.1328 85.8911 60.1299 85.8892 60.126 cv
cp
1 .54902 0 rgb
f
102.836 38.9312 mo
101.788 38.7671 100.352 39.0825 98.8345 39.6089 cv
98.8296 39.6084 98.8237 39.6084 98.8188 39.6074 cv
98.7661 39.6289 94.9536 41.1606 92.2651 42.4482 cv
89.5591 43.7441 90.8101 41.3809 90.8101 41.3809 cv
90.8101 41.3809 92.6938 40.1416 95.3696 39.5796 cv
94.8765 39.6309 94.3921 39.6948 93.939 39.7803 cv
89.8999 40.5435 88.8149 41.126 78.8862 47.8525 cv
78.4067 48.1777 77.8716 48.5342 77.3101 48.9048 cv
79.0093 48.8579 80.6265 48.8076 82.0845 48.7451 cv
83.9526 48.665 li
82.9761 50.2603 li
82.8315 50.498 79.3628 56.1216 74.5024 60.0815 cv
69.7339 63.9673 65.8511 64.8184 65.4243 64.9028 cv
65.1792 64.9492 li
56.0288 62.3203 li
47.6899 67.4609 40.5894 71.7617 40.5894 71.7617 cv
24.6763 71.5791 li
19.7495 73.6172 li
19.7495 73.6172 27.2856 79.4385 32.0728 81.2266 cv
33.1245 82.877 li
33.7144 83.8008 34.9517 84.0747 35.8765 83.4858 cv
40.0483 80.8262 li
44.3765 79.4922 50.022 76.8638 57.0005 73.5591 cv
67.228 68.7158 80.4272 62.3447 91.1704 55.1768 cv
91.1841 55.1699 91.1929 55.1655 91.2065 55.1587 cv
103.545 48.4873 106.23 39.46 102.836 38.9312 cv
cp
f
60.7495 48.9238 mo
60.7437 48.917 60.7407 48.9097 60.7358 48.9028 cv
59.2173 46.9497 li
58.5454 46.085 57.2876 45.9263 56.4204 46.5991 cv
53.3257 49.0054 li
55.5825 48.9087 58.1255 48.9019 60.7495 48.9238 cv
cp
0 .560784 .819608 rgb
f
82.1265 49.7397 mo
82.1265 49.7397 78.6577 55.4111 73.8735 59.3091 cv
69.0884 63.207 65.2222 63.9272 65.2222 63.9272 cv
37.8208 56.0381 li
37.8208 56.0381 40.0093 52.3965 47.3354 50.7002 cv
54.6616 49.0049 72.6851 50.1455 82.1265 49.7397 cv
cp
1 .54902 0 rgb
f
184.263 72.2075 mo
183.685 72.2075 183.216 71.7383 183.216 71.1606 cv
183.216 70.5825 183.685 70.1143 184.263 70.1143 cv
184.841 70.1143 185.309 70.5825 185.309 71.1606 cv
185.309 71.7383 184.841 72.2075 184.263 72.2075 cv
cp
178.244 72.2075 mo
177.666 72.2075 177.198 71.7383 177.198 71.1606 cv
177.198 70.5825 177.666 70.1143 178.244 70.1143 cv
178.823 70.1143 179.291 70.5825 179.291 71.1606 cv
179.291 71.7383 178.823 72.2075 178.244 72.2075 cv
cp
172.228 72.2075 mo
171.648 72.2075 171.181 71.7383 171.181 71.1606 cv
171.181 70.5825 171.648 70.1143 172.228 70.1143 cv
172.806 70.1143 173.272 70.5825 173.272 71.1606 cv
173.272 71.7383 172.806 72.2075 172.228 72.2075 cv
cp
166.21 72.2075 mo
165.632 72.2075 165.163 71.7383 165.163 71.1606 cv
165.163 70.5825 165.632 70.1143 166.21 70.1143 cv
166.787 70.1143 167.256 70.5825 167.256 71.1606 cv
167.256 71.7383 166.787 72.2075 166.21 72.2075 cv
cp
160.191 72.2075 mo
159.613 72.2075 159.146 71.7383 159.146 71.1606 cv
159.146 70.5825 159.613 70.1143 160.191 70.1143 cv
160.771 70.1143 161.238 70.5825 161.238 71.1606 cv
161.238 71.7383 160.771 72.2075 160.191 72.2075 cv
cp
154.175 72.2075 mo
153.596 72.2075 153.128 71.7383 153.128 71.1606 cv
153.128 70.5825 153.596 70.1143 154.175 70.1143 cv
154.753 70.1143 155.22 70.5825 155.22 71.1606 cv
155.22 71.7383 154.753 72.2075 154.175 72.2075 cv
cp
204.337 65.2915 mo
204.337 63.4932 li
211.887 63.4932 li
212.192 62.5566 212.336 61.9688 212.336 61.9688 cv
212.532 60.9663 211.855 60.147 210.835 60.147 cv
210.835 60.147 197.161 60.147 192.603 60.147 cv
191.558 60.147 191.111 60.7065 190.89 61.2236 cv
190.248 62.7109 188.867 65.2344 188.091 66.4688 cv
187.019 68.1782 183.45 67.8442 165.123 68.0762 cv
154.5 68.2104 150.351 68.3232 147.579 68.2505 cv
146.101 68.2124 145.333 68.0576 145.039 67.6021 cv
144.795 67.2207 144.793 66.7817 144.723 66.1455 cv
144.544 64.5601 144.495 64.0278 144.495 64.0278 cv
144.401 63.0103 143.488 62.1787 142.468 62.1787 cv
130.885 62.1787 li
129.864 62.1787 128.889 62.7813 128.937 63.7905 cv
128.968 64.4297 129.028 65.0054 129.84 66.4688 cv
131.095 68.729 132.394 68.7725 132.857 74.0293 cv
133.01 75.7437 133.111 76.8989 133.181 77.6772 cv
133.322 79.2856 134.269 79.5425 134.848 79.6333 cv
135.484 79.7334 136.153 79.7964 136.687 79.7964 cv
136.687 79.7964 182.754 79.7964 190.412 79.7964 cv
198.07 79.7964 200.13 79.1289 204.999 74.813 cv
208.177 71.9966 210.146 68.064 211.236 65.2915 cv
204.337 65.2915 li
cp
0 .560784 .819608 rgb
f
190.303 59.4375 mo
190.237 58.5127 li
197.209 58.5127 li
197.209 56.2549 li
187.811 56.2549 li
187.811 62.2378 li
189.003 62.2378 li
189.667 60.9712 190.216 59.8218 190.303 59.4375 cv
cp
1 .54902 0 rgb
f
186.703 49.084 mo
177.305 49.084 li
177.305 55.0669 li
186.703 55.0669 li
186.703 49.084 li
cp
f
188.364 63.4263 mo
187.811 63.4263 li
187.811 64.4116 li
187.991 64.0972 188.178 63.7642 188.364 63.4263 cv
cp
f
207.714 58.5127 mo
207.714 56.2549 li
198.317 56.2549 li
198.317 58.5127 li
207.714 58.5127 li
cp
f
197.209 49.084 mo
187.811 49.084 li
187.811 55.0669 li
197.209 55.0669 li
197.209 49.084 li
cp
f
176.197 56.2549 mo
166.799 56.2549 li
166.799 62.2378 li
176.197 62.2378 li
176.197 56.2549 li
cp
f
170.75 66.376 mo
172.786 66.3525 174.588 66.3325 176.197 66.3096 cv
176.197 63.4263 li
166.799 63.4263 li
166.799 66.4224 li
170.75 66.376 li
cp
f
186.703 65.6587 mo
186.703 63.4263 li
177.305 63.4263 li
177.305 66.292 li
182.677 66.2051 185.536 66.0688 186.703 65.6587 cv
cp
f
186.703 56.2549 mo
177.305 56.2549 li
177.305 62.2378 li
186.703 62.2378 li
186.703 56.2549 li
cp
f
147.45 46.2954 mo
144.899 46.2954 li
144.899 44.8999 li
147.45 44.8999 li
147.45 46.2954 li
cp
143.573 46.2954 mo
141.021 46.2954 li
141.021 44.8999 li
143.573 44.8999 li
143.573 46.2954 li
cp
148.883 47.4409 mo
148.883 44.8999 li
151.941 44.8999 li
151.941 44.7441 li
151.941 43.7227 151.105 42.8872 150.084 42.8872 cv
139.598 42.8872 li
138.577 42.8872 137.741 43.7227 137.741 44.7441 cv
137.741 44.8999 li
139.694 44.8999 li
139.694 46.2954 li
137.741 46.2954 li
137.741 51.8223 li
151.941 51.8223 li
151.941 47.4409 li
148.883 47.4409 li
cp
0 .560784 .819608 rgb
f
152.773 56.812 mo
149.586 56.812 li
149.586 55.0669 li
152.773 55.0669 li
152.773 56.812 li
cp
147.928 56.812 mo
144.739 56.812 li
144.739 55.0669 li
147.928 55.0669 li
147.928 56.812 li
cp
143.079 56.812 mo
139.891 56.812 li
139.891 55.0669 li
143.079 55.0669 li
143.079 56.812 li
cp
154.564 58.2437 mo
154.564 55.0669 li
158.245 55.0669 li
158.244 54.0464 157.409 53.2119 156.389 53.2119 cv
135.836 53.2119 li
134.814 53.2119 133.979 54.0464 133.979 55.0669 cv
138.012 55.0669 li
138.012 56.812 li
133.979 56.812 li
133.979 58.688 li
133.979 59.7095 134.814 60.5449 135.836 60.5449 cv
143.902 60.5449 li
145.325 60.5396 145.746 60.7861 145.847 61.4736 cv
145.915 61.936 145.918 62.2197 146.018 63.2363 cv
146.018 63.2363 146.088 63.9702 146.178 64.7788 cv
146.268 65.5869 146.716 66.2437 147.298 66.2832 cv
148.4 66.3594 149.27 66.437 150.289 66.437 cv
156.389 66.437 li
157.409 66.437 158.245 65.6021 158.245 64.5806 cv
158.245 58.2437 li
154.564 58.2437 li
cp
f
263.129 33.1313 mo
263.123 33.1274 li
261.252 34.4224 li
261.258 34.4282 li
261.252 34.4321 li
262.935 35.8735 li
262.939 35.8706 li
263.482 36.3364 li
264.439 36.1987 265.43 36.0864 266.467 35.9937 cv
264.813 34.5747 li
269.49 31.3364 li
283.238 31.3364 li
287.916 34.5747 li
286.264 35.9927 li
287.303 36.0845 288.294 36.1968 289.25 36.3325 cv
289.788 35.8706 li
289.793 35.8735 li
291.475 34.4321 li
291.469 34.4282 li
291.475 34.4224 li
289.604 33.1274 li
289.598 33.1313 li
287.004 31.3364 li
292.561 31.3364 li
292.561 29.3979 li
260.166 29.3979 li
260.166 31.3364 li
265.724 31.3364 li
263.129 33.1313 li
cp
f
295.065 74.3169 mo
293.422 74.3169 292.09 72.9839 292.09 71.3403 cv
292.09 69.6978 293.422 68.3647 295.065 68.3647 cv
296.709 68.3647 298.041 69.6978 298.041 71.3403 cv
298.041 72.9839 296.709 74.3169 295.065 74.3169 cv
cp
280.767 52.8237 mo
278 52.8237 li
278 45.021 li
284.427 45.0591 288.439 45.3452 292.395 46.0259 cv
294.313 46.3569 295.934 47.7544 295.934 49.0796 cv
295.934 56.6411 li
295.934 56.6411 290.576 56.3159 284.584 56.1021 cv
284.292 54.2485 282.699 52.8237 280.767 52.8237 cv
cp
282.604 76.5151 mo
281.955 76.5151 li
281.297 76.5151 281.355 75.9263 281.355 75.2065 cv
281.355 73.9194 li
281.355 73.1997 281.297 72.6099 281.955 72.6099 cv
282.604 72.6099 li
283.262 72.6099 283.201 73.1997 283.201 73.9194 cv
283.201 75.2065 li
283.201 75.9263 283.262 76.5151 282.604 76.5151 cv
cp
271.961 60.5454 mo
270.895 60.5454 270.021 59.6743 270.021 58.6079 cv
270.021 56.7017 li
270.021 55.6353 270.895 54.7622 271.961 54.7622 cv
280.767 54.7622 li
281.833 54.7622 282.705 55.6353 282.705 56.7017 cv
282.705 58.6079 li
282.705 59.6743 281.833 60.5454 280.767 60.5454 cv
271.961 60.5454 li
cp
279.882 76.5151 mo
279.232 76.5151 li
278.574 76.5151 278.635 75.9263 278.635 75.2065 cv
278.635 73.9194 li
278.635 73.1997 278.574 72.6099 279.232 72.6099 cv
279.882 72.6099 li
280.539 72.6099 280.48 73.1997 280.48 73.9194 cv
280.48 75.2065 li
280.48 75.9263 280.539 76.5151 279.882 76.5151 cv
cp
276.91 76.5151 mo
275.816 76.5151 li
274.707 76.5151 274.809 75.522 274.809 74.3091 cv
274.809 72.1401 li
274.809 70.9263 274.707 69.9341 275.816 69.9341 cv
276.91 69.9341 li
278.02 69.9341 277.918 70.9263 277.918 72.1401 cv
277.918 74.3091 li
277.918 75.522 278.02 76.5151 276.91 76.5151 cv
cp
273.494 76.5151 mo
272.846 76.5151 li
272.188 76.5151 272.247 75.9263 272.247 75.2065 cv
272.247 73.9194 li
272.247 73.1997 272.188 72.6099 272.846 72.6099 cv
273.494 72.6099 li
274.152 72.6099 274.093 73.1997 274.093 73.9194 cv
274.093 75.2065 li
274.093 75.9263 274.152 76.5151 273.494 76.5151 cv
cp
270.772 76.5151 mo
270.124 76.5151 li
269.465 76.5151 269.525 75.9263 269.525 75.2065 cv
269.525 73.9194 li
269.525 73.1997 269.465 72.6099 270.124 72.6099 cv
270.772 72.6099 li
271.432 72.6099 271.371 73.1997 271.371 73.9194 cv
271.371 75.2065 li
271.371 75.9263 271.432 76.5151 270.772 76.5151 cv
cp
268.144 56.1021 mo
262.151 56.3159 256.793 56.6411 256.793 56.6411 cv
256.793 49.0796 li
256.793 47.7544 258.414 46.3569 260.334 46.0259 cv
264.287 45.3452 268.301 45.0591 274.728 45.021 cv
274.728 52.8237 li
271.961 52.8237 li
270.027 52.8237 268.435 54.2485 268.144 56.1021 cv
cp
257.662 74.3169 mo
256.018 74.3169 254.686 72.9839 254.686 71.3403 cv
254.686 69.6978 256.018 68.3647 257.662 68.3647 cv
259.305 68.3647 260.637 69.6978 260.637 71.3403 cv
260.637 72.9839 259.305 74.3169 257.662 74.3169 cv
cp
276.363 36.5845 mo
278.326 36.5845 279.918 38.1763 279.918 40.1392 cv
279.918 42.1021 278.326 43.6938 276.363 43.6938 cv
274.4 43.6938 272.809 42.1021 272.809 40.1392 cv
272.809 38.1763 274.4 36.5845 276.363 36.5845 cv
cp
298.822 68.2095 mo
298.822 45.7036 li
298.822 42.5044 296.125 39.6235 293.006 38.9165 cv
289.555 38.1353 285.962 37.7476 281.233 37.606 cv
280.316 35.8501 278.479 34.646 276.363 34.646 cv
274.248 34.646 272.412 35.8501 271.494 37.606 cv
266.775 37.7476 263.234 38.1343 259.723 38.9165 cv
256.6 39.6118 253.905 42.5044 253.905 45.7036 cv
253.905 68.2095 li
253.193 69.062 252.746 70.145 252.746 71.3403 cv
252.746 72.5356 253.193 73.6187 253.905 74.4712 cv
253.905 78.9067 li
276.516 80.8452 li
298.822 78.9067 li
298.822 74.4712 li
299.534 73.6177 299.98 72.5356 299.98 71.3403 cv
299.98 70.145 299.534 69.063 298.822 68.2095 cv
cp
1 .54902 0 rgb
f
295.184 87.5396 mo
294.061 83.8042 li
296.627 83.5591 li
297.824 86.4263 li
297.148 86.7583 296.265 87.1431 295.184 87.5396 cv
cp
256.1 83.5591 mo
258.645 83.8022 li
257.535 87.5356 li
256.46 87.1411 255.579 86.7563 254.902 86.4243 cv
256.1 83.5591 li
cp
288.742 84.313 mo
291.34 84.0649 li
292.619 88.3696 li
291.752 88.6157 290.793 88.854 289.75 89.0786 cv
288.742 84.313 li
cp
283.241 84.8384 mo
286.028 84.5728 li
287.086 89.5747 li
286.029 89.7437 284.898 89.8921 283.694 90.0142 cv
283.241 84.8384 li
cp
277.73 85.3657 mo
280.54 85.0981 li
280.99 90.2339 li
279.953 90.2974 278.864 90.3384 277.73 90.3579 cv
277.73 85.3657 li
cp
272.187 85.0981 mo
274.997 85.3657 li
274.997 90.3599 li
273.863 90.3403 272.773 90.3003 271.736 90.2368 cv
272.187 85.0981 li
cp
262.977 89.0806 mo
261.934 88.8569 260.975 88.6177 260.107 88.3706 cv
261.388 84.0649 li
263.984 84.313 li
262.977 89.0806 li
cp
266.699 84.5728 mo
269.486 84.8394 li
269.033 90.0181 li
267.828 89.895 266.697 89.7466 265.641 89.5776 cv
266.699 84.5728 li
cp
298.697 80.6499 mo
276.403 82.5884 li
276.324 82.5884 li
254.03 80.6499 li
251.119 87.6157 li
251.119 87.6157 258.231 93.269 276.324 93.2856 cv
276.324 93.2856 li
276.338 93.2856 276.351 93.2856 276.363 93.2856 cv
276.377 93.2856 276.391 93.2856 276.403 93.2856 cv
276.403 93.2856 li
294.496 93.269 301.608 87.6157 301.608 87.6157 cv
298.697 80.6499 li
cp
0 .560784 .819608 rgb
f
259.688 283.188 mo
259.844 277.534 260.039 270.127 260.112 266.243 cv
260.126 265.524 260.188 265.185 260.229 265.035 cv
260.399 264.978 260.828 264.879 261.744 264.879 cv
262.422 264.879 263.242 264.931 264.252 265.04 cv
273.129 265.993 273.326 266.832 273.575 267.894 cv
274.139 270.294 276.49 280.461 278.051 287.214 cv
278.186 287.222 278.31 287.22 278.451 287.233 cv
279.182 287.301 279.991 287.317 280.791 287.329 cv
279.237 280.603 276.734 269.776 276.15 267.29 cv
275.487 264.468 273.954 263.422 264.534 262.41 cv
258.49 261.761 257.531 262.88 257.469 266.194 cv
257.396 269.981 257.211 277.064 257.059 282.634 cv
258.021 282.754 258.912 282.932 259.688 283.188 cv
cp
f
262.641 285.72 mo
263.264 287.802 264.719 291.269 265.41 292.099 cv
265.605 292.301 266.498 292.778 270.482 292.778 cv
271.557 292.778 272.074 292.496 272.346 292.103 cv
271.705 290.348 269.844 290.84 267.141 291.465 cv
265.765 291.782 265.146 287.377 264.643 284.903 cv
263.614 279.849 264.139 275.474 263.908 273.954 cv
263.679 272.437 261.951 272.655 261.043 275.368 cv
260.672 276.479 260.929 280.183 261.332 283.976 cv
261.968 284.424 262.423 284.993 262.641 285.72 cv
cp
1 .54902 0 rgb
f
276.75 283.725 mo
276.244 282.82 274.358 282.911 272.538 283.929 cv
270.719 284.945 269.652 286.503 270.157 287.407 cv
270.517 288.051 271.578 288.181 272.814 287.842 cv
273.443 289.153 li
274.195 288.003 275.299 287.485 276.392 287.292 cv
275.828 286.116 li
276.693 285.269 277.096 284.345 276.75 283.725 cv
cp
f
259.751 300.134 mo
259.751 302.544 257.797 304.499 255.387 304.499 cv
252.977 304.499 251.021 302.544 251.021 300.134 cv
251.021 297.724 252.977 295.769 255.387 295.769 cv
257.797 295.769 259.751 297.724 259.751 300.134 cv
cp
0 .560784 .819608 rgb
f
280.86 307.04 mo
277.053 307.04 273.954 303.942 273.954 300.134 cv
273.954 296.325 277.053 293.228 280.86 293.228 cv
284.668 293.228 287.766 296.325 287.766 300.134 cv
287.766 303.942 284.668 307.04 280.86 307.04 cv
cp
255.387 307.04 mo
251.578 307.04 248.48 303.942 248.48 300.134 cv
248.48 296.325 251.578 293.228 255.387 293.228 cv
259.194 293.228 262.293 296.325 262.293 300.134 cv
262.293 303.942 259.194 307.04 255.387 307.04 cv
cp
287.361 294.419 mo
286.856 292.263 285.903 290.08 285.213 289.619 cv
284.11 288.884 280.885 289.23 278.289 288.989 cv
275.692 288.747 274.707 289.767 274.379 291.588 cv
274.051 293.41 272.871 294.542 270.482 294.542 cv
268.092 294.542 265.055 294.427 264.055 293.228 cv
263.057 292.028 261.5 288.06 260.951 286.225 cv
260.242 283.854 252.576 284.14 249.105 284.183 cv
246.237 284.218 245.298 288.521 245.18 290.36 cv
245.063 292.201 244.477 298.794 244.477 298.794 cv
244.455 299.405 245.396 299.737 246.729 299.915 cv
246.727 299.989 246.717 300.06 246.717 300.134 cv
246.717 304.913 250.606 308.803 255.387 308.803 cv
259.508 308.803 262.961 305.908 263.836 302.046 cv
265.906 302.132 268.448 302.182 271.584 302.181 cv
271.877 302.181 272.156 302.174 272.443 302.171 cv
273.363 305.97 276.783 308.803 280.86 308.803 cv
285.641 308.803 289.529 304.913 289.529 300.134 cv
289.529 297.943 288.707 295.946 287.361 294.419 cv
cp
f
285.39 300.134 mo
285.39 302.636 283.362 304.663 280.86 304.663 cv
278.358 304.663 276.331 302.636 276.331 300.134 cv
276.331 297.632 278.358 295.604 280.86 295.604 cv
283.362 295.604 285.39 297.632 285.39 300.134 cv
cp
f
294.625 302.036 mo
291.943 302.81 li
279.753 260.579 li
282.435 259.805 li
294.625 302.036 li
cp
f
313.589 294.624 mo
291.428 301.021 li
291.943 302.81 li
314.105 296.411 li
313.589 294.624 li
cp
f
317.113 291.466 mo
295.232 297.782 li
290.383 280.983 li
312.264 274.668 li
317.113 291.466 li
cp
1 .54902 0 rgb
f
303.891 275.327 mo
289.914 279.36 li
286.859 268.773 li
300.834 264.739 li
303.891 275.327 li
cp
f
363.179 283.672 mo
362.44 283.508 361.888 282.852 361.888 282.063 cv
361.888 281.15 362.628 280.412 363.54 280.412 cv
364.452 280.412 365.191 281.15 365.191 282.063 cv
365.191 282.852 364.64 283.508 363.901 283.672 cv
366.741 283.672 li
366.987 283.186 367.138 282.645 367.138 282.063 cv
367.138 280.076 365.527 278.465 363.54 278.465 cv
361.553 278.465 359.941 280.076 359.941 282.063 cv
359.941 282.645 360.093 283.186 360.338 283.672 cv
363.179 283.672 li
cp
f
413.987 283.672 mo
413.25 283.508 412.697 282.852 412.697 282.063 cv
412.697 281.15 413.437 280.412 414.35 280.412 cv
415.263 280.412 416.001 281.15 416.001 282.063 cv
416.001 282.852 415.448 283.508 414.71 283.672 cv
417.552 283.672 li
417.796 283.186 417.948 282.645 417.948 282.063 cv
417.948 280.076 416.336 278.465 414.35 278.465 cv
412.361 278.465 410.751 280.076 410.751 282.063 cv
410.751 282.645 410.901 283.186 411.147 283.672 cv
413.987 283.672 li
cp
f
420.118 314.131 mo
420.118 315.17 419.269 316.02 418.231 316.02 cv
359.126 316.02 li
358.089 316.02 357.239 315.17 357.239 314.131 cv
357.239 283.951 li
357.239 282.912 358.089 282.063 359.126 282.063 cv
418.231 282.063 li
419.269 282.063 420.118 282.912 420.118 283.951 cv
420.118 314.131 li
cp
0 .560784 .819608 rgb
f
416.125 285.355 mo
413.609 285.355 li
413.609 312.727 li
416.125 312.727 li
416.125 285.355 li
cp
410.306 285.355 mo
407.789 285.355 li
407.789 312.727 li
410.306 312.727 li
410.306 285.355 li
cp
404.486 285.355 mo
401.97 285.355 li
401.97 312.727 li
404.486 312.727 li
404.486 285.355 li
cp
398.667 285.355 mo
396.15 285.355 li
396.15 312.727 li
398.667 312.727 li
398.667 285.355 li
cp
392.847 285.355 mo
390.331 285.355 li
390.331 312.727 li
392.847 312.727 li
392.847 285.355 li
cp
387.026 285.355 mo
384.511 285.355 li
384.511 312.727 li
387.026 312.727 li
387.026 285.355 li
cp
381.207 285.355 mo
378.69 285.355 li
378.69 312.727 li
381.207 312.727 li
381.207 285.355 li
cp
375.388 285.355 mo
372.871 285.355 li
372.871 312.727 li
375.388 312.727 li
375.388 285.355 li
cp
369.568 285.355 mo
367.052 285.355 li
367.052 312.727 li
369.568 312.727 li
369.568 285.355 li
cp
363.748 312.727 mo
361.232 312.727 li
361.232 285.355 li
363.748 285.355 li
363.748 312.727 li
cp
1 .54902 0 rgb
f
392.984 262.209 mo
392.727 260.42 391.402 259.729 390.489 258.738 cv
387.079 258.738 li
387.131 259.678 387.449 260.441 388.528 260.902 cv
389.381 261.268 390.047 261.887 390.357 262.57 cv
392.983 263.873 li
393.064 263.336 393.066 262.771 392.984 262.209 cv
cp
f
393.287 247.033 mo
384.105 247.033 li
384.105 250.146 li
393.287 250.146 li
393.287 247.033 li
cp
f
388.306 265.357 mo
387.399 265.371 386.474 264.939 386.166 264.021 cv
385.77 262.84 384.981 263.311 385.001 263.67 cv
385.007 263.779 384.62 266.432 387.884 267.061 cv
388.984 267.271 389.889 267.201 390.623 266.941 cv
388.306 265.357 li
cp
f
393.287 251.328 mo
384.105 251.328 li
384.964 258.201 li
392.428 258.201 li
393.287 251.328 li
cp
f
384.267 265.367 mo
364.68 277.557 li
366.51 278.641 li
385.382 266.896 li
384.974 266.561 384.448 266.02 384.267 265.367 cv
cp
0 .560784 .819608 rgb
f
388.675 262.625 mo
387.116 263.594 li
387.362 263.91 387.839 264.4 388.683 264.844 cv
411.182 278.645 li
413.052 277.596 li
388.675 262.625 li
cp
f
191.539 409.319 mo
190.615 408.669 189.652 408.05 188.613 407.493 cv
190.693 403.151 191.952 397.985 192.087 392.429 cv
198.297 392.429 li
198.061 398.899 195.551 404.788 191.539 409.319 cv
cp
182.108 416.185 mo
184.256 414.354 186.154 412.005 187.699 409.249 cv
188.57 409.712 189.383 410.226 190.167 410.759 cv
187.846 413.021 185.121 414.87 182.108 416.185 cv
cp
175.871 417.616 mo
177.721 415.101 179.131 411.093 180.073 406.401 cv
182.15 406.897 184.111 407.565 185.925 408.38 cv
183.396 412.87 179.888 416.175 175.871 417.616 cv
cp
187.699 373.61 mo
186.154 370.854 184.256 368.505 182.108 366.675 cv
185.12 367.989 187.843 369.835 190.163 372.097 cv
189.381 372.632 188.571 373.146 187.699 373.61 cv
cp
180.074 376.458 mo
179.131 371.765 177.721 367.757 175.871 365.241 cv
179.888 366.685 183.396 369.987 185.925 374.478 cv
184.112 375.294 182.15 375.962 180.074 376.458 cv
cp
171.321 377.478 mo
168.974 377.478 166.697 377.267 164.524 376.874 cv
166.099 369.165 168.803 364.437 171.321 364.437 cv
173.838 364.437 176.542 369.165 178.118 376.874 cv
175.945 377.267 173.667 377.478 171.321 377.478 cv
cp
162.568 376.458 mo
160.492 375.962 158.53 375.294 156.716 374.478 cv
159.246 369.987 162.753 366.685 166.771 365.241 cv
164.92 367.757 163.51 371.765 162.568 376.458 cv
cp
161.177 390.429 mo
152.553 390.429 li
152.687 385.181 153.866 380.31 155.803 376.237 cv
157.788 377.142 159.934 377.878 162.206 378.419 cv
161.573 382.208 161.226 386.339 161.177 390.429 cv
cp
150.554 390.429 mo
144.344 390.429 li
144.581 383.958 147.091 378.069 151.104 373.538 cv
152.028 374.188 152.989 374.81 154.028 375.364 cv
151.949 379.706 150.69 384.872 150.554 390.429 cv
cp
160.534 366.675 mo
158.385 368.505 156.488 370.854 154.943 373.61 cv
154.072 373.146 153.259 372.634 152.476 372.099 cv
154.796 369.837 157.521 367.989 160.534 366.675 cv
cp
173.969 362.679 mo
173.101 362.522 172.218 362.437 171.321 362.437 cv
170.423 362.437 169.541 362.522 168.672 362.679 cv
153.966 364.017 142.444 376.374 142.444 391.429 cv
142.444 395.054 143.118 398.519 144.336 401.714 cv
144.709 401.788 145.194 401.841 145.819 401.841 cv
146.005 401.841 146.208 401.829 146.408 401.821 cv
145.194 398.911 144.465 395.749 144.344 392.429 cv
150.554 392.429 li
150.627 395.409 151.032 398.271 151.705 400.96 cv
152.319 400.81 152.959 400.642 153.628 400.454 cv
153.003 397.927 152.625 395.235 152.553 392.429 cv
161.177 392.429 li
161.199 394.241 161.289 396.058 161.426 397.851 cv
162.098 397.593 162.748 397.335 163.374 397.077 cv
163.272 395.579 163.197 394.04 163.178 392.429 cv
172.661 392.429 li
173.859 391.692 174.843 391.019 175.643 390.429 cv
163.178 390.429 li
163.227 386.155 163.586 382.249 164.162 378.835 cv
166.453 379.255 168.85 379.478 171.321 379.478 cv
173.792 379.478 176.189 379.255 178.48 378.835 cv
178.781 380.618 179.018 382.542 179.187 384.575 cv
181.141 384.046 li
180.971 382.12 180.739 380.229 180.436 378.419 cv
182.708 377.878 184.854 377.142 186.838 376.237 cv
187.676 377.997 188.362 379.915 188.893 381.94 cv
190.812 381.421 li
190.245 379.274 189.511 377.239 188.614 375.364 cv
189.653 374.81 190.614 374.187 191.538 373.538 cv
195.55 378.069 198.061 383.958 198.297 390.429 cv
192.087 390.429 li
192.047 388.802 191.901 387.216 191.676 385.667 cv
190.007 388.821 li
190.042 389.354 190.075 389.888 190.088 390.429 cv
189.157 390.429 li
188.098 392.429 li
190.088 392.429 li
189.955 397.679 188.776 402.55 186.837 406.622 cv
184.853 405.718 182.707 404.979 180.436 404.438 cv
180.794 402.292 181.05 400.03 181.223 397.733 cv
180.597 398.39 179.861 399.12 179.026 399.897 cv
178.875 401.333 178.699 402.724 178.48 404.024 cv
177.243 403.798 175.971 403.634 174.676 403.526 cv
173.842 404.149 172.947 404.776 172.003 405.396 cv
174.108 405.433 176.157 405.63 178.117 405.985 cv
176.542 413.692 173.838 418.421 171.321 418.421 cv
169.169 418.421 166.883 414.958 165.281 409.142 cv
164.674 409.425 164.053 409.698 163.417 409.964 cv
164.291 413.106 165.411 415.767 166.771 417.616 cv
163.797 416.55 161.105 414.456 158.88 411.622 cv
158.194 411.839 157.526 412.036 156.883 412.21 cv
157.994 413.708 159.208 415.056 160.534 416.185 cv
158.454 415.276 156.522 414.099 154.754 412.722 cv
153.893 412.903 153.073 413.04 152.292 413.136 cv
156.752 417.048 162.422 419.612 168.673 420.181 cv
169.541 420.335 170.423 420.421 171.321 420.421 cv
172.218 420.421 173.101 420.335 173.968 420.181 cv
188.675 418.843 200.198 406.483 200.198 391.429 cv
200.198 376.374 188.675 364.017 173.969 362.679 cv
cp
f
141.5 399.841 mo
141.5 399.841 138.313 407.321 156.063 401.821 cv
173.813 396.321 179.875 389.446 179.875 389.446 cv
177.827 387.017 li
190.522 383.571 li
184.289 395.353 li
182.375 393.321 li
182.375 393.321 174.438 404.321 159.313 409.384 cv
144.801 414.241 143.419 408.61 142.341 406.362 cv
141.263 404.114 140.664 402.282 141.5 399.841 cv
cp
1 .54902 0 rgb
f
61.9683 374.225 mo
49.7788 374.225 39.8618 384.143 39.8618 396.332 cv
39.8618 408.521 49.7788 418.439 61.9683 418.439 cv
74.1582 418.439 84.0752 408.521 84.0752 396.332 cv
84.0752 384.143 74.1582 374.225 61.9683 374.225 cv
cp
61.9683 421.262 mo
48.2222 421.262 37.0391 410.078 37.0391 396.332 cv
37.0391 382.586 48.2222 371.402 61.9683 371.402 cv
75.7144 371.402 86.8979 382.586 86.8979 396.332 cv
86.8979 410.078 75.7144 421.262 61.9683 421.262 cv
cp
0 .560784 .819608 rgb
f
61.9683 392.02 mo
59.5903 392.02 57.6558 393.953 57.6558 396.332 cv
57.6558 398.709 59.5903 400.645 61.9683 400.645 cv
64.3467 400.645 66.2813 398.709 66.2813 396.332 cv
66.2813 393.953 64.3467 392.02 61.9683 392.02 cv
cp
61.9683 402.525 mo
58.5527 402.525 55.7744 399.748 55.7744 396.332 cv
55.7744 392.916 58.5527 390.137 61.9683 390.137 cv
65.3838 390.137 68.1626 392.916 68.1626 396.332 cv
68.1626 399.748 65.3838 402.525 61.9683 402.525 cv
cp
f
61.9683 398.578 mo
60.7295 398.578 59.7212 397.57 59.7212 396.332 cv
59.7212 395.092 60.7295 394.084 61.9683 394.084 cv
63.2075 394.084 64.2158 395.092 64.2158 396.332 cv
64.2158 397.57 63.2075 398.578 61.9683 398.578 cv
cp
f
61.9683 351.477 mo
57.5439 351.477 53.9438 355.076 53.9438 359.502 cv
53.9438 363.926 57.5439 367.527 61.9683 367.527 cv
66.3931 367.527 69.9932 363.926 69.9932 359.502 cv
69.9932 355.076 66.3931 351.477 61.9683 351.477 cv
cp
61.9683 369.408 mo
56.5059 369.408 52.0625 364.965 52.0625 359.502 cv
52.0625 354.039 56.5059 349.596 61.9683 349.596 cv
67.4307 349.596 71.8745 354.039 71.8745 359.502 cv
71.8745 364.965 67.4307 369.408 61.9683 369.408 cv
cp
f
63.9824 372.695 mo
59.9546 372.695 li
59.9546 364.904 li
63.9824 364.904 li
63.9824 372.695 li
cp
1 .54902 0 rgb
f
65.9341 365.369 mo
58.0029 365.369 li
58.0029 361.965 li
65.9341 361.965 li
65.9341 365.369 li
cp
f
66.9849 373.115 mo
56.8232 373.115 li
56.8232 370.51 li
66.9849 370.51 li
66.9849 373.115 li
cp
0 .560784 .819608 rgb
f
41.373 375.771 mo
43.6304 378.461 li
48.2412 374.592 li
45.9834 371.902 li
41.373 375.771 li
cp
1 .54902 0 rgb
f
77.9536 371.902 mo
75.6958 374.592 li
80.3066 378.461 li
82.564 375.771 li
77.9536 371.902 li
cp
f
78.251 394.832 mo
78.251 397.783 li
82.7319 397.783 li
82.7319 394.832 li
78.251 394.832 li
cp
41.7979 397.783 mo
46.2788 397.783 li
46.2788 394.832 li
41.7979 394.832 li
41.7979 397.783 li
cp
60.7891 416.775 mo
63.7417 416.775 li
63.7417 412.293 li
60.7891 412.293 li
60.7891 416.775 li
cp
60.7891 375.84 mo
63.7417 375.84 li
63.7417 380.322 li
60.7891 380.322 li
60.7891 375.84 li
cp
0 .560784 .819608 rgb
f
56.1421 376.76 mo
57.7935 376.316 li
58.9526 380.646 li
57.3027 381.088 li
56.1421 376.76 li
cp
1 .54902 0 rgb
f
65.5771 411.971 mo
67.2285 411.529 li
68.3877 415.855 li
66.7368 416.299 li
65.5771 411.971 li
cp
f
51.291 379.01 mo
52.771 378.156 li
55.0122 382.037 li
53.5317 382.891 li
51.291 379.01 li
cp
f
69.519 410.58 mo
70.998 409.727 li
73.2383 413.605 li
71.7588 414.461 li
69.519 410.58 li
cp
f
47.1875 382.439 mo
48.396 381.232 li
51.5659 384.4 li
50.3564 385.609 li
47.1875 382.439 li
cp
f
72.9653 408.217 mo
74.1733 407.01 li
77.3408 410.176 li
76.1333 411.385 li
72.9653 408.217 li
cp
f
44.1123 386.816 mo
44.9668 385.336 li
48.8486 387.576 li
47.9932 389.057 li
44.1123 386.816 li
cp
f
75.6831 405.043 mo
76.5376 403.563 li
80.416 405.803 li
79.563 407.283 li
75.6831 405.043 li
cp
f
42.2749 391.838 mo
42.7158 390.188 li
47.0459 391.348 li
46.603 392.998 li
42.2749 391.838 li
cp
f
77.4868 401.273 mo
77.9297 399.621 li
82.2554 400.781 li
81.8145 402.432 li
77.4868 401.273 li
cp
f
42.7178 402.432 mo
42.2729 400.781 li
46.604 399.621 li
47.0469 401.273 li
42.7178 402.432 li
cp
f
77.9297 392.998 mo
77.4868 391.346 li
81.8145 390.189 li
82.2573 391.838 li
77.9297 392.998 li
cp
f
44.9688 407.283 mo
44.1123 405.805 li
47.9951 403.563 li
48.8506 405.043 li
44.9688 407.283 li
cp
f
76.5386 389.057 mo
75.6841 387.576 li
79.564 385.338 li
80.4185 386.816 li
76.5386 389.057 li
cp
f
48.3984 411.387 mo
47.1885 410.18 li
50.3594 407.01 li
51.5684 408.217 li
48.3984 411.387 li
cp
f
74.1753 385.609 mo
72.9663 384.4 li
76.1353 381.234 li
77.3433 382.441 li
74.1753 385.609 li
cp
f
52.7739 414.463 mo
51.293 413.609 li
53.5347 409.727 li
55.0146 410.58 li
52.7739 414.463 li
cp
f
71 382.891 mo
69.52 382.037 li
71.7607 378.158 li
73.2412 379.012 li
71 382.891 li
cp
f
57.7959 416.301 mo
56.145 415.861 li
57.3052 411.529 li
58.9556 411.971 li
57.7959 416.301 li
cp
f
67.2295 381.088 mo
65.5791 380.646 li
66.7397 376.318 li
68.3906 376.762 li
67.2295 381.088 li
cp
f
65.7769 392.768 mo
63.5771 391.5 li
70.4014 379.682 li
72.6021 380.951 li
65.7769 392.768 li
cp
0 .560784 .819608 rgb
f
101.096 309.407 mo
101.096 310.452 100.241 311.308 99.1948 311.308 cv
35.6079 311.308 li
34.561 311.308 33.7056 310.452 33.7056 309.407 cv
33.7056 306.175 li
33.7056 305.13 34.561 304.272 35.6079 304.272 cv
99.1948 304.272 li
100.241 304.272 101.096 305.13 101.096 306.175 cv
101.096 309.407 li
cp
f
45.2222 313.532 mo
45.2222 314.243 44.3667 314.825 43.3208 314.825 cv
39.1743 314.825 li
38.1274 314.825 37.272 314.243 37.272 313.532 cv
37.272 312.819 38.1274 312.237 39.1743 312.237 cv
43.3208 312.237 li
44.3667 312.237 45.2222 312.819 45.2222 313.532 cv
cp
1 .54902 0 rgb
f
96.8101 313.532 mo
96.8101 314.243 95.9546 314.825 94.9087 314.825 cv
90.7612 314.825 li
89.7153 314.825 88.8599 314.243 88.8599 313.532 cv
88.8599 312.819 89.7153 312.237 90.7612 312.237 cv
94.9087 312.237 li
95.9546 312.237 96.8101 312.819 96.8101 313.532 cv
cp
f
101.096 302.212 mo
101.096 302.634 100.757 302.979 99.7114 302.979 cv
35.0874 302.979 li
34.0415 302.979 33.7056 302.634 33.7056 302.212 cv
33.7056 301.788 34.0415 301.442 35.0874 301.442 cv
99.7114 301.442 li
100.757 301.442 101.096 301.788 101.096 302.212 cv
cp
0 .560784 .819608 rgb
f
38.3608 265.938 mo
38.3608 298.067 li
38.3608 299.114 39.2163 299.97 40.2622 299.97 cv
42.3325 299.97 li
43.3794 299.97 44.2349 299.114 44.2349 298.067 cv
44.2349 265.938 li
38.3608 265.938 li
cp
f
82.9106 299.86 mo
52.0591 299.86 li
52.0591 270.384 li
82.9106 270.384 li
82.9106 299.86 li
cp
1 .54902 0 rgb
f
90.3013 299.86 mo
84.0532 299.86 li
84.0532 270.384 li
90.3013 270.384 li
90.3013 299.86 li
cp
f
28.7427 262.61 mo
28.7808 255.72 34.3979 250.126 41.2974 250.126 cv
48.1968 250.126 53.8149 255.72 53.8521 262.61 cv
28.7427 262.61 li
cp
41.2974 248.224 mo
33.314 248.224 26.8413 254.696 26.8413 262.681 cv
26.8413 263.302 26.8413 263.302 26.8413 263.302 cv
26.9126 263.968 27.311 264.513 28.3569 264.513 cv
54.314 264.513 li
55.3599 264.513 55.6841 263.968 55.7544 263.302 cv
55.7544 263.302 55.7544 263.302 55.7544 262.681 cv
55.7544 254.696 49.2817 248.224 41.2974 248.224 cv
cp
f
53.0396 260.083 mo
49.52 261.026 li
49.3071 260.226 li
52.8247 259.282 li
53.0396 260.083 li
cp
0 .560784 .819608 rgb
f
51.936 257.138 mo
48.7817 258.958 li
48.3677 258.239 li
51.522 256.419 li
51.936 257.138 li
cp
f
50.1079 254.575 mo
47.5317 257.151 li
46.9458 256.565 li
49.522 253.989 li
50.1079 254.575 li
cp
f
47.6802 252.577 mo
45.8579 255.729 li
45.1392 255.315 li
46.9614 252.161 li
47.6802 252.577 li
cp
f
44.8159 251.272 mo
43.8726 254.79 li
43.0728 254.575 li
44.0161 251.058 li
44.8159 251.272 li
cp
f
41.7134 250.753 mo
41.7114 255.565 li
40.8843 255.569 li
40.8843 250.753 li
41.7134 250.753 li
cp
f
38.5815 251.056 mo
39.522 254.573 li
38.7241 254.79 li
37.7817 251.271 li
38.5815 251.056 li
cp
f
35.6333 252.159 mo
37.4536 255.313 li
36.7388 255.728 li
34.9175 252.573 li
35.6333 252.159 li
cp
f
33.0728 253.985 mo
35.647 256.562 li
35.063 257.149 li
32.4888 254.571 li
33.0728 253.985 li
cp
f
31.0718 256.415 mo
34.2251 258.237 li
33.813 258.954 li
30.6597 257.134 li
31.0718 256.415 li
cp
f
29.7681 259.278 mo
33.2847 260.222 li
33.0728 261.022 li
29.5552 260.079 li
29.7681 259.278 li
cp
f
42.8306 260.091 mo
41.3364 259.362 li
44.2173 253.46 li
45.7114 254.19 li
42.8306 260.091 li
cp
1 .54902 0 rgb
f
39.9644 261.7 mo
40.2563 261.274 40.7446 260.995 41.2974 260.995 cv
41.8511 260.995 42.3394 261.274 42.6313 261.7 cv
44.6802 261.7 li
44.2759 260.204 42.9204 259.093 41.2974 259.093 cv
39.6743 259.093 38.3188 260.204 37.9146 261.7 cv
39.9644 261.7 li
cp
0 .560784 .819608 rgb
f
65.2739 291.913 mo
53.9185 291.913 li
53.9185 290.647 li
65.2739 290.647 li
65.2739 291.913 li
cp
f
56.2915 278.331 mo
53.6763 282.841 li
58.9077 282.841 li
56.2915 278.331 li
cp
55.0396 283.872 mo
57.5435 283.872 li
57.5435 289.474 li
55.0396 289.474 li
55.0396 283.872 li
cp
f
62.9009 278.331 mo
60.2837 282.841 li
65.5171 282.841 li
62.9009 278.331 li
cp
61.6489 283.872 mo
64.1528 283.872 li
64.1528 289.474 li
61.6489 289.474 li
61.6489 283.872 li
cp
f
81.2935 282.712 mo
80.2397 280.142 77.7163 278.331 74.7661 278.331 cv
71.8169 278.331 69.2935 280.142 68.2388 282.712 cv
81.2935 282.712 li
cp
f
76.397 291.913 mo
75.3032 291.913 74.1929 291.218 74.188 289.89 cv
74.1821 288.78 74.188 283.845 74.188 283.845 cv
75.3462 283.849 li
75.3462 283.849 75.3413 288.776 75.3462 289.884 cv
75.3501 290.747 76.354 290.757 76.397 290.757 cv
76.6802 290.757 77.2993 290.528 77.2993 289.853 cv
78.4585 289.853 li
78.4585 291.126 77.3882 291.913 76.397 291.913 cv
cp
f
169.728 292.47 mo
150.994 253.05 li
149.791 253.622 li
141.833 257.403 li
142.933 259.718 li
148.855 256.903 li
166.448 293.921 li
167.453 293.284 168.554 292.794 169.728 292.47 cv
cp
f
184.343 299.774 mo
199.587 292.53 li
198.063 289.321 li
182.568 296.685 li
183.302 297.616 183.902 298.653 184.343 299.774 cv
cp
f
172.973 292.021 mo
175.987 292.021 178.741 293.116 180.873 294.923 cv
204.467 283.765 li
192.212 257.851 li
162.626 271.843 li
172.189 292.062 li
172.45 292.044 172.708 292.021 172.973 292.021 cv
cp
1 .54902 0 rgb
f
180.242 261.048 mo
161.884 269.729 li
156.316 257.958 li
174.675 249.274 li
180.242 261.048 li
cp
f
138.878 263.118 mo
147.484 259.028 li
145.443 254.733 li
136.837 258.825 li
138.878 263.118 li
cp
f
154.873 272.19 mo
156.446 271.444 li
154.643 267.649 li
153.07 268.397 li
154.873 272.19 li
cp
f
162.789 288.845 mo
164.361 288.097 li
162.559 284.304 li
160.986 285.05 li
162.789 288.845 li
cp
f
172.973 311.296 mo
169.08 311.296 165.924 308.142 165.924 304.247 cv
165.924 300.353 169.08 297.196 172.973 297.196 cv
176.867 297.196 180.023 300.353 180.023 304.247 cv
180.023 308.142 176.867 311.296 172.973 311.296 cv
cp
172.973 294.718 mo
167.71 294.718 163.445 298.983 163.445 304.247 cv
163.445 309.511 167.71 313.776 172.973 313.776 cv
178.237 313.776 182.501 309.511 182.501 304.247 cv
182.501 298.983 178.237 294.718 172.973 294.718 cv
cp
0 .560784 .819608 rgb
f
177.549 304.247 mo
177.549 306.774 175.5 308.823 172.973 308.823 cv
170.446 308.823 168.398 306.774 168.398 304.247 cv
168.398 301.718 170.446 299.671 172.973 299.671 cv
175.5 299.671 177.549 301.718 177.549 304.247 cv
cp
f
184.539 284.687 mo
174.292 289.579 li
173.747 288.438 li
183.994 283.544 li
184.539 284.687 li
cp
f
170.581 276.3 mo
170.163 281.499 li
174.884 279.243 li
170.581 276.3 li
cp
171.838 281.841 mo
174.097 280.763 li
176.511 285.817 li
174.252 286.896 li
171.838 281.841 li
cp
f
176.544 273.452 mo
176.126 278.649 li
180.848 276.396 li
176.544 273.452 li
cp
177.803 278.993 mo
180.061 277.913 li
182.475 282.968 li
180.216 284.048 li
177.803 278.993 li
cp
f
195.029 269.479 mo
192.97 267.616 189.914 267.069 187.252 268.339 cv
184.59 269.61 183.093 272.331 183.25 275.104 cv
195.029 269.479 li
cp
f
194.576 279.894 mo
193.589 280.364 192.287 280.216 191.708 279.019 cv
191.226 278.021 189.104 273.565 189.104 273.565 cv
190.151 273.069 li
190.151 273.069 192.271 277.517 192.752 278.517 cv
193.127 279.292 194.039 278.868 194.077 278.849 cv
194.332 278.728 194.793 278.253 194.502 277.644 cv
195.547 277.146 li
196.096 278.294 195.47 279.466 194.576 279.894 cv
cp
f
377.092 156.702 mo
377.092 138.608 li
372.877 138.608 li
372.877 157.506 li
374.249 157.073 375.662 156.803 377.092 156.702 cv
cp
f
363.452 164.424 mo
363.452 138.608 li
361.569 138.608 li
361.569 167.803 li
362.064 166.629 362.696 165.5 363.452 164.424 cv
cp
f
367.615 160.18 mo
367.615 138.608 li
364.694 138.608 li
364.694 162.852 li
365.586 161.836 366.566 160.948 367.615 160.18 cv
cp
f
371.747 157.895 mo
371.747 138.608 li
368.825 138.608 li
368.825 159.358 li
369.762 158.782 370.737 158.288 371.747 157.895 cv
cp
f
390.052 160.858 mo
390.32 161.081 390.562 161.325 390.814 161.559 cv
390.814 138.608 li
387.893 138.608 li
387.893 159.336 li
388.635 159.792 389.362 160.284 390.052 160.858 cv
cp
f
396.402 172.092 mo
396.402 138.608 li
392.189 138.608 li
392.189 162.981 li
394.474 165.624 395.89 168.788 396.402 172.092 cv
cp
f
386.626 158.622 mo
386.626 138.608 li
384.742 138.608 li
384.742 157.801 li
385.381 158.038 386.01 158.309 386.626 158.622 cv
cp
f
383.46 157.366 mo
383.46 138.608 li
381.576 138.608 li
381.576 156.934 li
382.209 157.045 382.838 157.186 383.46 157.366 cv
cp
f
380.548 156.782 mo
380.548 138.608 li
378.105 138.608 li
378.105 156.657 li
378.921 156.643 379.735 156.686 380.548 156.782 cv
cp
f
413.755 174.563 mo
415.639 174.563 li
415.639 138.608 li
413.755 138.608 li
413.755 174.563 li
cp
f
409.436 174.563 mo
412.357 174.563 li
412.357 138.608 li
409.436 138.608 li
409.436 174.563 li
cp
f
417.082 183.315 mo
418.966 183.315 li
418.966 138.608 li
417.082 138.608 li
417.082 183.315 li
cp
f
420.249 138.608 mo
420.249 183.315 li
422.132 183.315 li
422.132 138.608 li
420.249 138.608 li
cp
f
400.633 174.563 mo
403.075 174.563 li
403.075 138.608 li
400.633 138.608 li
400.633 174.563 li
cp
f
404.638 174.563 mo
407.56 174.563 li
407.56 138.608 li
404.638 138.608 li
404.638 174.563 li
cp
f
397.751 174.563 mo
399.635 174.563 li
399.635 138.608 li
397.751 138.608 li
397.751 174.563 li
cp
f
360.275 172.721 mo
360.275 138.608 li
358.392 138.608 li
358.392 183.315 li
360.275 183.315 li
360.275 177.026 li
360.107 175.598 360.104 174.155 360.275 172.721 cv
cp
f
355.226 183.315 mo
357.109 183.315 li
357.109 138.608 li
355.226 138.608 li
355.226 183.315 li
cp
f
391.237 185.575 mo
385.338 192.67 374.803 193.641 367.706 187.745 cv
360.608 181.846 359.637 171.309 365.535 164.211 cv
371.434 157.116 381.97 156.145 389.066 162.043 cv
396.163 167.942 397.135 178.477 391.237 185.575 cv
cp
390.052 160.858 mo
382.3 154.413 370.791 155.475 364.35 163.227 cv
357.906 170.979 358.968 182.487 366.719 188.93 cv
374.472 195.374 385.979 194.313 392.422 186.559 cv
398.865 178.807 397.805 167.299 390.052 160.858 cv
cp
1 .54902 0 rgb
f
387.975 182.864 mo
383.573 188.159 375.711 188.885 370.417 184.483 cv
365.121 180.081 364.395 172.221 368.797 166.924 cv
373.197 161.627 381.06 160.903 386.355 165.305 cv
391.651 169.708 392.377 177.567 387.975 182.864 cv
cp
387.364 164.092 mo
381.397 159.133 372.542 159.95 367.585 165.917 cv
362.626 171.881 363.442 180.737 369.407 185.694 cv
375.374 190.655 384.229 189.838 389.188 183.872 cv
394.146 177.907 393.33 169.049 387.364 164.092 cv
cp
f
393.283 187.375 mo
392.602 188.196 391.844 188.911 391.034 189.534 cv
391.894 190.249 li
395.852 185.485 li
394.992 184.772 li
394.526 185.682 393.964 186.559 393.283 187.375 cv
cp
f
392.777 190.985 mo
394.399 192.333 li
394.998 192.831 395.896 192.747 396.394 192.147 cv
398.543 189.561 li
399.039 188.963 398.957 188.067 398.358 187.569 cv
396.737 186.221 li
392.777 190.985 li
cp
f
399.585 190.43 mo
397.437 193.016 li
397.323 193.151 397.189 193.254 397.043 193.338 cv
414.604 208.721 li
415.202 209.219 416.1 209.135 416.598 208.538 cv
418.351 206.428 li
418.849 205.831 418.766 204.932 418.166 204.436 cv
399.83 189.985 li
399.776 190.141 399.698 190.293 399.585 190.43 cv
cp
f
380.371 166.792 mo
379.319 166.854 378.144 167.053 376.893 167.512 cv
376.893 176.924 li
380.371 176.924 li
380.371 166.792 li
cp
0 .560784 .819608 rgb
f
375.449 168.161 mo
374.423 168.688 373.37 169.385 372.32 170.334 cv
371.055 171.477 370.134 172.682 369.451 173.831 cv
369.451 176.924 li
375.449 176.924 li
375.449 168.161 li
cp
f
386.867 181.944 mo
387.914 180.684 388.623 179.257 389.023 177.773 cv
389.023 172.01 li
388.553 170.268 387.655 168.628 386.34 167.261 cv
386.34 182.517 li
386.519 182.33 386.699 182.146 386.867 181.944 cv
cp
f
381.834 166.786 mo
381.834 185.359 li
382.773 185.051 383.677 184.62 384.517 184.057 cv
384.517 167.272 li
384.064 167.124 383.109 166.866 381.834 166.786 cv
cp
f
372.479 167.706 mo
373.5 166.991 374.492 166.508 375.449 166.168 cv
375.449 164.269 li
373.351 164.846 371.4 166.042 369.903 167.842 cv
369.741 168.038 369.598 168.243 369.451 168.446 cv
369.451 170.672 li
370.188 169.639 371.166 168.625 372.479 167.706 cv
cp
f
384.517 167.176 mo
384.517 165.727 li
383.671 165.159 382.767 164.732 381.834 164.425 cv
381.834 165.975 li
383.129 166.356 384.071 166.891 384.517 167.176 cv
cp
f
380.371 165.657 mo
380.371 164.05 li
379.219 163.84 378.045 163.822 376.893 163.979 cv
376.893 165.76 li
378.161 165.504 379.336 165.504 380.371 165.657 cv
cp
f
147.338 190.503 mo
140.272 185.703 li
140.272 152.794 li
147.338 147.994 li
147.338 190.503 li
cp
1 .54902 0 rgb
f
198.653 176.22 mo
198.207 187.074 195.433 194.925 183.362 197.968 cv
183.262 197.978 183.117 197.98 182.963 197.98 cv
182.567 197.98 182.257 197.957 182.179 197.943 cv
170.205 194.904 167.442 187.06 166.995 176.22 cv
166.753 170.353 166.47 162.429 166.352 159.07 cv
182.829 157.802 li
199.297 159.07 li
199.179 162.427 198.895 170.353 198.653 176.22 cv
cp
182.828 156.117 mo
182.828 156.115 li
182.824 156.115 li
182.821 156.115 li
182.821 156.117 li
164.615 157.517 li
164.615 157.517 164.999 168.597 165.315 176.289 cv
165.794 187.902 168.936 196.318 181.825 199.585 cv
182.15 199.669 183.417 199.689 183.704 199.617 cv
196.692 196.371 199.854 187.939 200.333 176.289 cv
200.65 168.597 201.033 157.517 201.033 157.517 cv
182.828 156.117 li
cp
0 .560784 .819608 rgb
f
182.583 159.507 mo
168.089 160.623 li
168.227 164.49 168.466 171.087 168.675 176.152 cv
169.101 186.49 171.562 193.47 182.475 196.283 cv
182.502 196.285 182.546 196.287 182.583 196.289 cv
182.583 159.507 li
cp
f
163.635 176.359 mo
163.322 168.75 162.939 157.685 162.935 157.576 cv
162.904 156.675 163.587 155.91 164.486 155.841 cv
182.659 154.443 li
182.714 154.437 182.77 154.435 182.824 154.435 cv
182.867 154.435 182.914 154.437 182.957 154.439 cv
191.487 155.095 li
191.487 147.994 li
149.037 147.994 li
149.037 190.503 li
166.637 190.503 li
164.489 186.281 163.841 181.349 163.635 176.359 cv
cp
1 .54902 0 rgb
f
258.903 203.567 mo
252.003 198.88 li
252.003 166.741 li
258.903 162.054 li
258.903 203.567 li
cp
f
316.534 158.954 mo
280.973 144.093 li
280.971 144.087 li
280.963 144.089 li
280.957 144.087 li
280.954 144.093 li
245.392 158.954 li
246.143 160.751 li
280.963 146.198 li
315.784 160.751 li
316.534 158.954 li
cp
f
271.596 154.716 mo
236.193 169.509 li
245.679 161.835 li
279.869 147.567 li
271.596 154.716 li
cp
0 .560784 .819608 rgb
f
245.09 161.187 mo
244.487 159.479 li
236.193 167.522 li
236.193 168.921 li
245.09 161.187 li
cp
1 .54902 0 rgb
f
281.426 147.325 mo
272.446 155.263 li
286.068 161.116 li
302.46 161.116 li
302.46 168.159 li
305.604 169.509 li
314.893 161.368 li
281.426 147.325 li
cp
0 .560784 .819608 rgb
f
301.522 203.567 mo
260.066 203.567 li
260.066 162.054 li
301.522 162.054 li
301.522 203.567 li
cp
1 .54902 0 rgb
f
278.585 189.601 mo
267.229 189.601 li
267.229 188.335 li
278.585 188.335 li
278.585 189.601 li
cp
0 .560784 .819608 rgb
f
269.603 176.019 mo
266.985 180.528 li
272.218 180.528 li
269.603 176.019 li
cp
268.351 181.56 mo
270.854 181.56 li
270.854 187.161 li
268.351 187.161 li
268.351 181.56 li
cp
f
276.211 176.019 mo
273.595 180.528 li
278.827 180.528 li
276.211 176.019 li
cp
274.96 181.56 mo
277.463 181.56 li
277.463 187.161 li
274.96 187.161 li
274.96 181.56 li
cp
f
294.604 180.399 mo
293.55 177.829 291.026 176.019 288.077 176.019 cv
285.128 176.019 282.604 177.829 281.55 180.399 cv
294.604 180.399 li
cp
f
289.707 189.601 mo
288.614 189.601 287.503 188.905 287.497 187.577 cv
287.492 186.468 287.497 181.532 287.497 181.532 cv
288.655 181.536 li
288.655 181.536 288.651 186.464 288.655 187.571 cv
288.659 188.435 289.665 188.444 289.707 188.444 cv
289.989 188.444 290.61 188.216 290.61 187.54 cv
291.769 187.54 li
291.769 188.813 290.698 189.601 289.707 189.601 cv
cp
f
287.047 379.981 mo
290.683 379.603 292.116 381.007 292.34 384.083 cv
295.284 383.073 297.556 382.296 297.556 382.296 cv
292.202 367.474 li
275.521 373.087 li
276.481 376.114 277.372 378.501 278.374 381.272 cv
279.495 381.075 283.976 380.3 287.047 379.981 cv
cp
1 .54902 0 rgb
f
291.306 383.53 mo
290.956 381.63 289.132 380.376 287.229 380.722 cv
278.913 382.253 li
274.229 376.03 li
273.71 373.839 271.763 372.198 269.411 372.183 cv
269.399 372.183 269.389 372.183 269.378 372.183 cv
266.632 372.183 264.396 374.399 264.378 377.149 cv
264.252 394.815 li
264.234 397.476 266.3 398.944 268.924 401.265 cv
276.337 407.905 li
277.96 419.673 li
278.202 421.425 279.702 422.694 281.423 422.694 cv
281.582 422.694 281.743 422.685 281.905 422.661 cv
283.82 422.397 285.159 420.632 284.895 418.716 cv
283.096 405.677 li
282.982 404.856 282.581 404.103 281.964 403.548 cv
274.222 396.612 li
274.228 396.517 274.251 396.427 274.252 396.331 cv
274.294 389.923 li
274.085 389.577 271.438 385.194 269.88 381.89 cv
274.622 388.19 li
275.29 389.079 276.331 389.587 277.418 389.587 cv
277.628 389.587 277.841 389.567 278.052 389.528 cv
288.496 387.606 li
290.397 387.257 291.655 385.433 291.306 383.53 cv
cp
0 .560784 .819608 rgb
f
263.925 398.944 mo
255.47 418.108 li
254.688 419.876 255.49 421.942 257.259 422.724 cv
257.718 422.927 258.198 423.022 258.669 423.022 cv
260.014 423.022 261.296 422.243 261.874 420.935 cv
269.403 403.868 li
267.904 402.755 265.612 400.909 263.925 398.944 cv
cp
f
269.132 371.661 mo
269.235 371.667 269.339 371.669 269.442 371.669 cv
273.054 371.669 276.014 368.843 276.181 365.235 cv
276.222 364.36 276.093 363.501 275.812 362.696 cv
263.034 367.022 li
263.327 367.917 263.802 368.749 264.455 369.466 cv
265.669 370.798 267.329 371.579 269.132 371.661 cv
cp
f
278.86 360.739 mo
262.661 366.222 li
262.661 366.222 261.253 361.675 264.36 359.642 cv
266.878 357.993 269.442 357.446 271.696 358.112 cv
273.748 358.718 275.013 360.515 275.013 360.515 cv
275.013 360.515 278.86 359.751 279.111 359.89 cv
279.856 360.298 279.144 360.581 278.86 360.739 cv
cp
1 .54902 0 rgb
f
392.611 384.118 mo
393.039 384.29 393.484 384.374 393.925 384.374 cv
395.081 384.374 396.198 383.8 396.86 382.78 cv
402.064 374.776 li
403.118 373.155 402.658 370.987 401.037 369.935 cv
399.419 368.882 397.25 369.339 396.195 370.962 cv
392.564 376.546 li
386.099 373.925 li
385.238 373.202 384.145 372.747 382.934 372.739 cv
382.922 372.739 382.911 372.739 382.899 372.739 cv
380.153 372.739 377.919 374.956 377.9 377.706 cv
377.788 394.69 li
377.793 394.692 377.798 394.694 377.802 394.696 cv
377.663 396.198 378.003 397.843 378.868 398.618 cv
389.859 408.462 li
391.482 420.229 li
391.724 421.981 393.224 423.253 394.944 423.251 cv
395.104 423.251 395.266 423.241 395.428 423.218 cv
397.342 422.954 398.681 421.188 398.416 419.272 cv
396.618 406.233 li
396.505 405.413 396.104 404.659 395.486 404.104 cv
387.748 397.175 li
387.755 397.077 387.773 396.985 387.774 396.888 cv
387.861 383.759 li
385.485 382.425 382.616 380.708 381.388 379.562 cv
381.413 379.571 381.435 379.589 381.46 379.599 cv
392.611 384.118 li
cp
0 .560784 .819608 rgb
f
382.654 372.218 mo
382.759 372.224 382.862 372.226 382.966 372.226 cv
386.576 372.226 389.536 369.399 389.703 365.792 cv
389.876 362.075 386.993 358.911 383.277 358.739 cv
379.543 358.581 376.398 361.452 376.225 365.165 cv
376.141 366.966 376.764 368.69 377.978 370.022 cv
379.191 371.354 380.852 372.136 382.654 372.218 cv
cp
f
377.447 399.499 mo
368.991 418.665 li
368.211 420.433 369.012 422.499 370.78 423.28 cv
371.24 423.483 371.72 423.579 372.191 423.579 cv
373.536 423.579 374.818 422.8 375.396 421.491 cv
382.925 404.425 li
381.426 403.31 379.134 401.466 377.447 399.499 cv
cp
f
396.31 370.233 mo
396.891 369.269 398.157 369.19 398.157 369.19 cv
397.704 368.294 li
397.704 368.294 395.477 368.837 395.273 368.813 cv
395.273 368.813 395.729 371.2 396.31 370.233 cv
cp
405.201 357.278 mo
405.201 357.278 399.201 363.028 397.888 363.347 cv
396.574 363.665 395.684 363.88 395.684 363.88 cv
396.673 367.972 li
396.673 367.972 397.565 367.757 398.878 367.44 cv
400.191 367.122 408.157 369.493 408.157 369.493 cv
405.201 357.278 li
cp
394.697 364.104 mo
392.484 364.64 li
393.482 368.759 li
395.693 368.224 li
394.697 364.104 li
cp
407.81 364.614 mo
407.81 364.614 408.917 364.19 408.614 362.944 cv
408.313 361.696 407.14 361.845 407.14 361.845 cv
407.81 364.614 li
cp
392.595 368.386 mo
392.595 368.386 391.506 368.517 391.184 367.187 cv
390.862 365.858 391.88 365.433 391.88 365.433 cv
392.595 368.386 li
cp
1 .54902 0 rgb
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 16.2.0
%%For: (galina) ()
%%Title: (1402.i017.005.S.m004.c11.logistics icons blue and orange set [\757\760\745\756\741\760\740\747\756\742\740\755\755\773\751].eps)
%%CreationDate: 2/20/2014 4:42 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6Bj4fRZ9R!Fch![qi62aaZfZh#"CiR<'9YWCJJ_n4_#pr:cIqq\J+g$PQ)(66@)+k5qttBiBC@*h=Xo\/V,C<m,i-&>4usW(
%oS,m%UOTJs*;V;oq9M;*EU23)hV7I/<e66-kA8Kc:1'&PSaL%:*;)h^a\&]2=*n%rffl-;g9j`4IXguC.c#=bmVVXnh6#(Ld%8g_
%]#-d_O/os`:jK'ucO>m/Sdbt4e"'75Fi)9Q^4!;)2^T5![=p8P]19QVFPNJ]7`0/&.,&n]$0n)LBj6$/A1KO(r`c$;CE)*Ip/ukp
%D:Z!joPqHE",`r/p*h*tXqaf$0)t+5s5]Z=(kDU(fu<toZ198ip1f%.OEOsFhEW$O'SsP5qUnd^gen6)/234Ei,3aXg2Bd!4@YnY
%eu>qknDEB7/kRA(`Kk#;*]X]99uD:G3aOE1]R&M5Be9\/H4i<BWfmm5pNNh<YEdhjDYp(g<b'i#:Nq-b7:VYj#/G0'qVC\R@;ec^
%M\qc&E4d/2FSjS@XSPu4bl_eTQ2al2G2)&PmZ^+Ze3CiaXOIkQs7Y_oct`U2L"*Z5OmUWcE-LrG$!m9'TH6OA=:9O!+)3Fu_bIeN
%juPecTgMI=<-*>0*Bh%B4`CFcDBm/7]dC#>*qt\@_\M0:7%En7`',(5%PiTX*CAqVIt4u!=FX6I7hJL4Qqk7\h%SDpCVI0ohl4BG
%61^S`KB?itnX/8#3XPeIk!X]@UjgS&n8F!>lr<Y5!IM"><1u5Rid^sfQ2Hs7^$_N?O&*cjZdWR)_pL^KZ-YHIm<<@7]:J2"9I"p]
%gYVs%?P[Db?[^8tl:9-$5G16'.t9lU?suHBqE=K?HVJqp@eGAC<=J@[,^:_Kig=\Sp?M&%l/Dlb&^SJQRf#d#q()DjLjq'VT6((4
%UC=t?hsl@@ckSV[D4ulJ"KE.-DrfA[q@a)k_6l<$h<g7udD#T^CC^qj+55c(bL#gkh]B5H2?)QQP&d*C';&cA%?<;JEEn^D^_]u0
%_(h^-SQ]q(IM4SUP)r>!9f(go`f)Ef):O9I$WoW!Wi>^a\@18_%M'n9T0[?G'q$fO2q6pu&#?2J:q#uI@"6\p9a4:XX(\b`cQiX]
%]LSQ^4H?+<:she).Q)"5\3_+c$1WXPbGH7hoqV^O)(8VN&2ApD9Cd;\*=oW7_W^OCjLDW[)YO+oZTUP%!6bluJ=6isQ&rf.ak.C#
%8C.D]"TA@q#H$u4V;>4@2tiI=H9r`!r*S_(p!%Zph`Dac:QKjn5MH4bd^NECqUPul.,)((Ej\*&fsu1f]p-D!n4Y;)da\tJBeKB+
%996?P8<:0q$+.EE/5^24XHets>_":R2>KIo:o/JQRg2*^?d;d]B9q6H=*rX]Y-iTQj7^"7]jTfM:`oCcA;Ji\c?dsBQt:0,/V.6`
%'h`*1#V69];Af;.q`qf*+jS.7pW1"Sc,\r-$Ot:)lD3ti4H&H2r@Zd6pKn>!ru1I;g'UqG*0IdTs&FEmXkfbE)f.m/hsZb_Hj[oZ
%*);G<W\fdYU8^]r!ACatIp\JO=']ZUg?tJ9^"R%$>Am;`SQo+Rd7JP*-',h5\&YL&n8._Xn;H#\^M5:;P7dU_S^I4_%!MOu"Vkf(
%BCb(is87XNHVU2^''rup;-qhfHuj$-s.gaoi^`k>!;O0][0Pc.eeTfAMa797`f8Rkd#[p.\&Zt?I^'c5!AA'ZJMH5ti*E2f(?l]o
%o-p<fNTOo!5kEsI0'"P_+d'QBs"2Ls_4MTlK8KCo1oumMX=_)SF>n\nLYE%=s5PEbInlW7cK;mR*=f!gO,Tf:cdl?)D?!\jri`X+
%?Y+R1A\63^=q?6.N?`&1b?kir-'#D'o+g?(rEk9V^C#8FMqYT6Ah2r5hVbc5.:b#V-D9`UBnIDU,EbML-:s0Ud$"uh'#l)CM#B.=
%&X%=ZeIDV"4ZA<:ifW0M4uTPh[&t0J%OTKhf@QBp\enkZR!b'agbnppJ*8]aF>5d20f^sCq(6S+c/3k7J5$gEHl=:pIrINr6Q"["
%UHnS?O7e^M)=i;/?fkgqk]OMp,tChDnTt6+F;O\fQieH1$iDSoOM1)/TCn-]e)o2.ZPF^TA,()->iq2WS^Vq-*ViQ!T0W(!BfI7d
%6I0F5oi(=-D7$2d7(;mXCB-a3?S)GuJ<)?fY=8cQF+/R7>PRrc5GSA(mHJ`JgHV0N-`e2aE+;"Js1aHR&%,l3lQ#Zq#NP5KPp-=q
%)6q?^N5)6>ST`Q0$b(nT^#/5Ij8mM<13\QOq6IcirA.@h5>9?O3$`(.ash'Pq60h=Z\f1]mU`oX+*C>i#FAn`/pctNU4`>+c80Dm
%dn,^jSaQ+bpZ<)/[>Y&VU%nLYEG%)hEieK4p\Wc>c&Bi)o`+*+E-8"]o)%um!G29e"<RO.S5#lU_1."3qem4sPt;oA)V.`RLR4@W
%s#9'L-i<gSdITS<.SgQSocG=6rs*6.8\`mQT;0EJc[OVcpLas1jTbTH6sX0TT>*#/T>1@mqL`UtMgBL#m2[3S8j/W;s2Xd!?bM*V
%nYNgo9)_?QbgfS)F8N@0RZ^+el5i\H8+BJ_/6D\/0cjFImYoH2SM$fas(>FE[&EpncnX`ZgBV7ir;gBU^J2q3!u2ccPg!:,V>?OF
%h1OS;TU'0cI^9SCT"/a`"CF-f[AG]k]AqW2EHfj%egqW@]HH>?G,O)Eg7ApDl?%7JCh(=H<suJdgDY4gI5I*;D3rn/%>Uh,,K#SL
%C-$2RB]n+Qmg&7%8TCb+:.NcB\TY`c-Xs/W`kcAmXqdT2F[l=L7V(O^X`66>e_[_^eE,P:Fc0?@cdLN]qipk9kmbr7*%NRr.Z1UR
%e,<-jHr0,OT3E+fr5:OJoKY:g_r'k':=`G[L44A"Y*rQ6RtsJr"^Z4u;6RF#akh__O2bHMknhce'uV!'()ohE[<1#H,gG^jQ]QAN
%^nLRhX\ln2Z9(')"!bhtZ?\.9JWo&kF##eG;BIo[Ls,Wi%fQ+SoTVsQd(k?oZ+9($"fLDSE,sYZA^^C4$M=m"JGuUVAhht$;ocYb
%[GC8cVjn%ChXC,ae%`1`.^\=5hJ*R^cIteEg?[.cl03d=e\/P(WJZnZZ`UQ_?WV^6*D^YLA#_sT9FPj@"CreHn%FDiZha'(VNtg.
%`d4%'C\Q>X*?+<5K@B8u]<qt6kY<U^Z`<Y^(fX?hZAQ)GdpA#U6/*f?D"r$1a#rk7^H&d;[bpM^LRkI8Z0QN.]i,hpGjbSY0gEN@
%Qj]palG4M>mZ('T:s]'HqtATE5r"\6hWX_,T)PjsdsUj?#rh)B"5`UZ'g1?erFK^9_o"PHg)ocHpMXt'YHNqX%$"DLL=`#8?+[Rb
%VqGk;-T@fE:H,$f.r4UF4F.l-?>4i$o5\\qeqpjo]pHhm2[F:\c=Gtu`mHs4k1YIVot,"?pJ*)OP8E)(C1cj!le5I-H9PV!HMXMH
%[Mj73R_=K;3ZIbgSYK(eXb0F!@(`aeCF/uXA@h=&gNr@7q-IPbC/#VmG,E;QO.mS+>8tE'&*lIWG<ShZ)i)`1rCUlbj7G$Ss5qMV
%`br-^rqogaE\$%u<_p0<XfY:^K;FQS\'DDtSfA_J1X*&)++)aT)i*<7`9[B0rl:;Ap#BcX3<&:,3:c,'7`TBE>$HE&kCXm$U*n4S
%8)Hi/l1V<?B*ZbcXY2%dD`2d)D[_>UO6qQUC*rniYgh@mKPqWpa2-Vbe]'3@p<rf<HU!hIRWmV*27mLF+2*/Qj7kp<dltUGhU:Op
%lWBU!Sbqf!gq3AlV>'ra_0Z.4j#bHEV6=Nkf$<YikeQ33KBL97D\G9Ys)"kmm+`I04ad(`IQ[E%YSY@S-\m.\gj/$7SZK=*AS:'!
%j?7K8^=/'+ps-]JYBdlWKC$="\?L@a]AATU&#9`.>.<(OcW4t3fY!Q*fW3bOp*I<?-uP'Z0<MrQpp/oHhtY39*t<-cQQAS>DdZ\]
%6m&-^6a5k'qT33RX9A1o6-F8_h0?JM^V+r?le9eM0q*sg_fs,;7Aq):s8''P^FVP%>#h1q5A\&qo$)NN56RJMaa6Jir6\YnoP!if
%\+07WTgJD1iTc&JT<H!#BGua7htDApS"WaGcOC3<1(rArLMp%i)_`hU[_B#em,$r$*XC*Uk\$fu]CBrVj7*&+?^pHVSX\rmrjt,R
%lWYIg27B"?Y;Zr8HGA$[I9XP(U\3Qom[c-)F*-nsF3e-<^E.c=Ci=1gr34f>rJ^//3#p^7g1h\cFbtm7I`1d2K2L3-ZL_l$U9WOc
%qdO>Nn_f+?8+To]!(:4@>(<mNpjN%+FQlYe[+?Ac:9QU"T23eUSLZDGie/A3O5k!oeIKism3[!"2a8D>3q@a$52L7e^978_#HL'i
%[l-cHmbV/O+/RkQj-=8[4h,el7!p$t:X5>'k`*iekH-+k^#q#kc0EaAK-+;*LG.p%B6EsT[s7NAW_elA89FP`m;=N25$_tG7rM0]
%QWj'a9O;ESHlB8qg"AK<TWZ]/)Vh48h,nJ7*H+^4#G$'W)t@S06ZF)P5OH53+i""eF8=[A=u@kq8bYZ;RVD-&4BNe=o-iEsDga[G
%U6gdAjdpjW%r(TNHB._FGZbfSl0GIjfDPqY)rYFJl-Y\:fVd!*7fDTlDJa9EnTqRTrLS.-h0o/!*k/_#s2XB[oq0]c_0UV+Iam"5
%rcjWG]N?op:,hX$??obaQfB`Y[ti"JW7n`8ld8Vr=K0TbNPdhR,GKC(/1PZ2rPtg>UJhOR^?tc$CI\n"6JqgqfFO!,1u@'R9_.:_
%2r<tOkpJ^mbH%`#Z?62mA-GHKS^mCsL""o0l4\BX;Y?[>hJM"`Ts_j;h6+)6[^knsf8"2(.JsO(?C8`&6st5:<$;"Ao\eE`OS!b[
%7_%lXotN>,IQVPK?dm#U[FM2"3YhJ\T(G>7p:C.sCp1*b[MrblEae/gJdg5MSX%qbAG/F)s(V/rG&nM@0A8@TkL2)"cARCm-N/(k
%m_!KL)Y3.gVhZ^LqY5kSm55jF*j'Jm1h.>=X-t[WNgdQA:\qGc^6VBk\o'eF$+A;7.ei]iIJUJt79&5EeVkX_V//QTb[@3%_]n!f
%G^a\;Tu[h75TO>X,.JNT.AI#KMsEG+;qSTeg^L2!\R^LK[b=nbg`_'nRkKi)lHcB_X&SB?A,>La_r`;T^[QYG1NN/J`<9W6k<#k(
%QLBfl\S*<S>1MY[e\NYm7+R<@m>9sAOfHQRH)+T.j+rrC^5C:Apn6k,&a/iL1;gtWOA?dkqDJ!^ZGC$lNd/d0NR-3[G/#eX.J&II
%i+B"a-/E-EBT?3.7c?tRZ@H&j<]nTn<pVeG;@ONaH#g">.NSNZ.+]s<8ZNpTah5`M/3gMY5+n/2`/L]FULkjQ@34'qb&.)V@tOha
%AbUmF_d*3iS[0TdN.+f!k2T<[/n*gL;&pFLnXN)7Mp]!4`*G]"Up#!Vk&%uINSX=^L0JG;]"@#.*.%>TOZ%s$H60K&I_>TcZ?>PP
%*Qso#h-Wa\"gEB<m$Wis[1>4Q*Ar3$pXV5a-bjQBg1K"TiUlg=mZ).B/:CoM#MrY@j'bhENg:J'MbX!Cg#CV"dED>qcAf7+G8AWh
%n_)[C)_YOq>.;,N^=R57*H#\sm<g#E_mo*;%GZ=e9C,i`]Q3jqX33`97`Aa'?XN^tNp?Mjc-F#Yqs2WmDqT._h=^`ANUGWIVjYZG
%#1W7N1ujS$cFtX[Q?QtG(?E6I!D`MrUI-cj8dITb<,Ho&s5i"=%1i^GMJW+XoA=Oo0&a@F!VJCBQV2QUg)Mr$\r=pkA"E4Q^Ro$X
%9[^,*T;lmUGO%Yb9cp"2Z\=mR.RWkncLG:l>C0UN^M^\dO7#gPMu2gYf"TpFIrjr1PYG`Pq%G]i@$U,ZYk1/;?IUp*rJ]JKkMUT8
%H"mU'_l*&%IVZEtrU'iG4\\k;d>X7[Hk'TLUF<]hk/!8SIWY49I0442Et?EhG.0E%SD<DX4F=Dln4/6th4$Sg]tU,99+QVUH+^8#
%I$iGG9%c=@m.AnqW;=mp\+B=`[^Ytu>,pB2h7HtPf1BpIE5;?uEhdpXp"BaM]XOe-i*2a5>_a(s5C'e-Nlp\*^eBt-p^Q-4:V;J7
%Z6,%L4"CPg^4W,*T(AbQorZchYB>IDhYR6=mZ"?ni>JMjG:O[Z,%((^hZ&bWS_!E*2m:h>H]+L#Y8!sKT5HOC]\7WAQX'R[iMWm3
%4M'pu-YN=[S^qMgs(&Fk*>b0qe$IEtT5L*d0p9)T2BEsT$W^S_Gg%a%E#q7=!=,jn*2^tn(@pkAor%,lft-5#HT/L$)i$*()sMtk
%bN=T9i)dVD&8uFWhV.c$o;>f:([hO'\iu2XFRNU.bLP@LXhD\ha69S=[^uKe\G"n+dd<=[V4A[0L?VJLG=u#(66/jg2kH*!r_SbY
%QCDZZO//_BaZ41(S&Sda\BRYja)!AsaaP#'S3;i`8hc7H>9"YAH]qdSiJ6MJA5mCEC)0WP+rXkJI<1A`F$5M2pIXsFT8Te\agG3s
%!fN[W:E(rN\HamU%put1fJj_DpTt2Y>UOapZ*Vi*H:&IGjjCJ+FU8mU[-bcKE2EHlG#ts6l0J64rVB`bOR<P1(85?9bua@sDju+2
%Dg`f"O05V`>5u<EQEXjDIADLjS%"1kkqfD,8"9DM5PO`7%I<I9m,G&l]QF>Z.fSr.F=4hp9@8"7hs>60hqm68Mrat]cf*kqB?Bu'
%#StiIU^B=3@NVQBr>TOQO5JdMGW+c6=V'D>X>f"kI=9Ui]=YG(H#r;n[s7ki4W)oXN%?Xnmr(>cd^feoj=M/k?+mgJ7=MOhqrZ2T
%hMp9^2@bRTli#o,]oD1_M[O@lA6ON.MkaK(,T5k>#DY6^N[n9BBN]aFfj)*-*STg"`p7_brVP=GS("?N\jaMaF=iri[bqk&LV*6@
%gi%D>3R>E%=]IH*P07k$QTkuk=*f)I]Hg_M?=Rd2e'kp/S]d9+Q`-;WhaUtec78MdDZ$O+@(T7r62199$-1k&?6)2mD;H4[G"GD_
%DIY'LqY"GR]mC"GIMucrP,0*2>$G;SMg=nRqY6l^WqlX65sWrVa8"@)19#c:V3,*]AXSMbPuB%?J&(:ThERtVLH8/Z(K'gDldsV9
%NIED%$tM5WheucS38F<aCA+gf$q\0cmDeYCZVcu1n^p,#[RZn;o]>%[\$<WPq-ra-qPe=t/)"#?f#Gnt))Uth,Q;lUC?%#HEI[S$
%GC$m:de)_tc7[cOh`itfa4kgS[(OHs.uM)jc,_9<*^?u!jjCueYEG(@Up7JbLsrhL:[W'>^6rAk(9O:oI<oD(g%]`teQb1^qt0#<
%pK8`SJ't8Jd^]0qmJZIZp=ANKe09\?nr;sN.j)>mCWYgcO$f<Mc"q]aGBphlQ<kY?[]a0?jftmNl+\2h4c5jo`Hq.Ao7KhN[!^;j
%RhLJMhiNfp]Y4%<E;.RCr[<)A[S_O$Ye7F8lK="8\^OotdIjVM;f1?XH2FZ$@4Pf85jMir#k%?R+*YL"d-U0)2Fj?VT5?^h5+-6B
%gY^^i?+bIK*D,=i?gE@37q#P6hHZu?m,TrA:_2=b;L6/2ZJfuqD]J2*aWGU7#M)k%2Ym(,afV[\0@n-%^/$Zt8)noLgnqH=*\CiB
%ki5_8n?JT[,OOC(@YbW1("6sak/X)W`sY\'2kE.CeKqgPN?iQ!H2i/!n35K.G]rQW%d6u-MiSh5eaIH&cB^4-d;0KlG8D$YE;\Vr
%),!bS2R_FaT=j^7-YocD:2edK;HlZ`l/9:p87uu3F7e[%Yh9;K?bCs4E%@C9;G?BM/T8+=Oh/9W)K'`8+Z6r<?``2;SOU9`Ef7rr
%e*G#PEO]s_1W95.aa#i]aJa-><aIES['oDZ^36J)S!/:Y2Wmd7'=W1_1nAiG%EEh.onGm#LU5\01_)IqSt>r0L$t"/kX?[i:HkoR
%H2CI.*(pg7Isu8iLmF`Qlhu(q-@6YG6Su[*7""_;WoNKho&8ldo[St%]R7<SXS;Ui572kR-#(q.^;%5IXPU5LH\F5<*ub*$(OI&Z
%YhA%nhMtdgNI0Ep%^Z7ZEb<D<XZ,%ZmENrLkSne.f>_$aakN^^$fopg[k2d$*ukc.h^7gkB9\fT'ir.DdbgO:*cNql_pEYt@<6/[
%c4][:qsph/O'^7^HuY@=hPsX7:!K'V5HM!\[h`f_]ngOgr!A1ir2]X.1]>,tbgN9.k;6,%:n?h#_hC%-TA[Pu]&1-)ZDq_H?#"/Y
%Im5-2)>2V@O%5\!jN1qiNV)>7L$-YJS*mo)j?\"Op4.JfG0t4(dB<S?Q`Ql&GIi(MH.GO[:QMRlK%9>Q2smMR"HJuWLM,F_;%\lW
%DVV^9Qp#&I*(2f9\`jSAj#^ILCI]Z:4(l/1(Q3:OShY9f?G]?uTar1^.B>*@487<>Cl[onF3UqJDKa=.mkp9iqK80_;*i9:I2[:\
%K9Lq?kl&,3n!!Ndo4dgkbJA>2@+X"2htZ(f?G'CRDYBWZeR5:l[;Tud4o"`2/CO=<P2kBqeKLdhq1P'm_pcW[IeY(aP1q)1-ArtL
%DnL>_PP!a75HWA:3XOa;kBM4>Cl#=OcAgu(NMA2=^3]87CG1#+lg?+18U#Z$X_r9G:`<VNe<F!08uGCJcggl*d_iKfq?A;l&1-5&
%n]nsa'rLilc0rhY7!.PKTX28i[I:h9mk;;b:Hj7,32EgIY%R8h.Iud$rn5k`DeI,3i4-\Me+3"bDSUm5&%KNt?"HD6mk90`d=8XP
%)"&J?N1S4dr9b#=<OD<TEd6K*?2OSZGkgM=WOOm"frn#r4u@H?`Od#bdZ_)2/aE8l6S?Rh:B1)SCY#I@BfN/s:9?c2o5"<MlL)[J
%hYkab]h^<4)p,d+^j!DGhXIU(G1(Zkf)qgB^J2#=eiSlY(Jh=)HLqN6n8^A!\P?p/pWJ3_LXAo-\G%q3hV-[W8%m19+-5<AmTKNg
%;>s)XDYqUQV/0=>?dD0T[5`Rgg?_4ciVLa:`EkZSp1B.%p0nm9%G:e9\*f>Whu(-tr$aX0%mKd3Q3d,sh`GT>DG9If^L"8h59pbc
%J\80d2rC:EEq^a>c2Pl-_i8TJ:H'hE1Pj]^V_r.,*Y/3Eo6BY1H/i&Bq4V1#38U..2msK.X="jSf:VMk//I:jk`O7)4ntu7k5Od\
%R&S24e":&B4?_Un[go9_:-&6hT![r+jPr$HS*_:^mkoi\YJ&fhZ1-#UV"hOkr7[j.&ZCi\I=La&qrujKjl<t$l:lIqfo@=s8oHh9
%&0Q`+[n&)u[H%24b)L>+b$#/$]qru?9.A-"V0b%cFsicM7o'HA]A'5Bds%9gDPfoGi(4T!:D)'ZIrFZpGG_&(s*eLAI9j&MI'g)\
%Yc_h^R^cl7`cdq]^6k1dX"UU0fM_Oqoq/#XOd+%%B'3#n=kG&uYa@M_1Ml@[cAOFYFmAMqljUaZA;:e'HTIYg=hfI+[i::G81>jr
%RdF$F/F@R-M_brj5U6ZAa9CbmbR](!0"US!eF.PZZ?'d,-0=6%39hKE7t^6Lk[-\;nQ<r<21.&b\9+lc3/[pR?[G9.Sp*s$<OMZ!
%ou@!p[n5DiW%P73U%(CRm>Kij?oHUeX1^N/>H,EE48WRDrbLr9jsue03_N?bc,8G%<h,A8Cf4M(`i`,S[j(Lla_(j3UNbAVN\A4[
%FS:)/?W!W$OUYo_%k>n5EH%n#X$t/NTr>!(I<\;_C5Zgc`m]Es`[==+Su^j3T8K)<l<ER2gsp0-N_EpZliStBf[PHhqHXfD-!o/R
%J:,Vb*Y,Ca///\$k4$5JEd%83o8@?b-eVj=nS!$aU]'mc0)<88##KC8fs!i%:/M0GI'M7sRWVh5e[T`krI1(L^\jN\6Xe,b+CVfK
%l1KM7HdM$eooYu&h.,_i%9M[fO1Ve%o`3!"4Yfk2f5Z":S$[ZtcM"JsN\#36h&UULet1g?bVmfQ;<kQ5'1PZF:S_;,nR&&tg*nUc
%2%ktQ/CI4H+?dSiD7uXmX'%Qt=/1KZJg'fc2B;fqVd&I]WCj9ulaN_I?T88=5!>b4&2B]FFcJcWZQY`I]q]"j9NkKaO\hY^eYC$@
%T\cJf2E\f%<V>r2*K(#.mYlLj(X"k+hO1g-#OSd=B]sj*^uLd16F.Bog[<J4p@r0=C!;lPS:u0F-ME5_52O,c1hp7p?!KG>H*c_e
%*VTbl%\Cl*h(_KPI55TH$*rF%B]=rUeu)\(JJYMCi25YiBEK$C;2<hD.78W]NFkqtTJOleAEI$g=]0"BOuIqFcqRK7nhaEJ)l,(\
%cE1BPO<'7KBk-V%m:3OD%B",1Rl9rV$VaP^HXh=Z:*%pEq,41\m=TherB`l[dR^s4=a(`n%YNH+G'B"n#5c;]YC@G+c'u=j9Brfp
%UK)*,gg`me@rQ@qlL]$1(Y%8_Iouh9HV?_/ECa_V0UW'Ueg\Sk[4XG!8+&7.'bdW^QLOHJ]q+lcmRp_lHc5Q23_NUuqCel-BJ/F[
%"7t!1%9=V_Ksh^N46N1\bSAmWB[.+WWZoCqH?k*#?ggrlPWseX;R>+UAVuIQjRZH4bKnRb*<oGh3m1Df.;l0AmpAn-Emd&*-\LJj
%VN<Q";W]5e8$djXji1SNKjAe2Q=FOUfIk7aq*aG02B`UTWENOhq0]Q1-)Y@G5M)fT>I93%&U_#a(9b)'*+c$+@9(,T+&.'9fb^:,
%B=XIR-GLhO9j%<fAb!O[=oA($'pTO6ik@Mc<Eh,37J(;,.8DAPTSK;[G_/L,PbLg64!Q>b>**:S'A)4Wb#OJG3AVdB.5,b7!G]qi
%R*>a_4d-7"b%C-%cS?quAY)K$9/(4Sq0mWNY06cW1Stcl.6g9DfM9>q=1,Q5W-t"*'"ITk3Nlu]6CS/Lj/A.H[JdjT)rodnbjNW!
%MOMGQ=]WQ!.2$ZMW>lLM4Q97dqYihS0q<)4G5C7q@!")lo'o"o1d7qc-<q;6p[#H@JHlmYFP?\r_008'hm:De;Q'K=XLOQ1l3o$r
%=\=CF[RjXORn&*pqSZY)4JU9;A_E\[W&$=Q:_hfAjBNf!o:o5eBL;EtmTYsUIQFJ&Bo2-$U1[B]kEGYHb7)!QD$9HCQg0[/cM*XM
%.b&Z(loE9"<)LKR0qOrC6T^RP@(HfhAt9ZWs7^6@F9t96+bZY':erB,Vk)4(,porX^a0K9Xrd51MAOKNZ5&09B>`"gjhR_H_kFVP
%Ak'$5ol4VPCQX<poppEr6[,.<+Yqd^C0qd#5&A"5\lejsSJMnXOD2Z'[=SQ\-j22uB3cSNV]ouABjWMAVrGkCj9gdFEl3fEq-<Xc
%!;u'l02KROCf_6<AQZ7$eME#IMB9Y(U][p<:Ye0XZ'<+(URJEm3Z"#%>79$K"]ie7(SY-s/XI]BP@(t1(<]_3h?P#.[')Eg&i*sn
%n#LfUB&_m7[bT.ZfUhI(VM"Rnh1Dq1BO#Nh;!%Q0iE`E3/rZ5f/rCQGT,aNLafN@lSAQgm?UOp[4=#?#4<"6dQC)`NZ"&p6G)dS/
%<;,(EQS:Bu_-&)dYI*+/0'J`eULZsY.:nM%N3Y9>e)%H];07Z<d]A20:pBu"M1s^;b@6:jQ5a%Pqd4#O+B#V>`B1,#Ks=lr53:;5
%`MKJU0__<Yj,;p8q;V8fm`9DD!M[L9atHUQU\kaY`u".4jbr:MYB4;q*Bfm6F]<V:9GYP8FF6%dcCFE@MO@#lm"2#s$Pl]ah?0/f
%j-"#ShQj&R8!d+_Ydd)V:!:q[l@Q=t2]F,2hsF;]X4gh$.u6e:;p6`Q[SLMS?eLg/9ubK:YF0,`.lj%>GB:7eRJ9NEQa\2%G!mt,
%DG5E5qffOL\iW+BFt0XBX,K_1qYcs;X<bFT;WFSMf8a)BfYuBUNRQ?oHYf+r%k;sQlh-IY.iNZ/]_!a8DnjG!.^&FOI%8bm0<+J_
%1pmnAf)@o6Z,!2OmUE:UjS/e!U?VsDGL&0^.lAch8#:p3%UP]UB>S%!F:XG7n>e2arrjSbV__YB\b*cn!>@R,/1pc%85"E954XKH
%o/`W04(An!q)+NbnbMDjhi/75;<0_00QQ.u_#*\?)EA+f)u9.d%"k"8#5+3S30;%^+;J"3`r3Cg"]QmAl;8/r&k7#a8c5"nHhB@X
%;SW^D33<"kT*&g"dM&XOqL2E8Js\)_U5<&JU:T[;dcf)>;&];=^'194,)7o$-_H>q08f'](o'nEf4-HVA2+sd:7*I#U]H'unpX#s
%I3up/l^mRB;DNE`PVB1c8VGgq5aPI%0WH/s*lBg=,3"0G#K;/Jof]1^e:KN)G0(!)oUA`e6EKfXjol>/JPc4,7)XI+U*!km"DZP.
%l\QDhMrM)bL2Oke9^7I%FhGYn]5d+UO,=3sY'9pD7p9,!XF:#^2HiPM\5fok/j_B0/X)l8d<5\&L(5rMlurV!`L/k5fdIG>K-3oE
%&L7c+28KVC,r7'->TOLdHpU/a`'ReF!afNr.iP8WY+f&EPa*3-Ffsi'/+CjNH:2XNO8s?(O1^9]-quDA+^+LZ^[CmF=rQ#k'Jn"9
%#FHYiIF8633UuF/lgej@Tr[I(<L\f0PZti/=4&X[Gt#mkBP2PEa"pc39Y)PddF2"R4%'Hj2]c=8IGb`"e$SOA@qlpn/u]sH8aEW#
%Ek)gsb+;ZkRL-%N/<+O9_Z[)T\cV?r?%7'LVDm"rnc*gZJ7R]?MEejNq4t4BPWG0k1peO,QsZZfU;2[BTMJ0=oc,Fsa3_\s%3Yit
%a[?@Ic2aj2Pa7C>(&aAI(=So\TH:=l@;(ombAllPQnjKJ?j>,&),u@a@LkO_q@5KO&OSqJOL0&sZ#Yq6)^'V96F9'D3Dj0Om+r[h
%<%!6RCDj-3+n9QRhJ3,cSr*bEA='#$TpOK#%)cm7")>CU.RSQfLXQ(3mk"8@>S?J?o5[//\>7Re1p)=[PLeP<b]oZZ17Btc)Rg-9
%*o!bV9*>;TU%4$d."UPZ1T>;darj`;),QN.:`7DK*OK@m+t"%U_"Htal<0&S>_b.?lt=PN+;QsT:^p]b8e5jkU*Tto)\^c/FBZXs
%_+A.g7V*]cM[!i#e#5%]Mg_Z<"$]In]s^ENZ[o3U+@n'7q&u/LAEd6</q[9CR/ush2Q4hN2_Eb+J2F,BH*1/+QB)/`/OPdhm.k:E
%7S.;n)=b[0g=dYoa&3-cm*3VZVA(WBCuf-U/q_db0L.dX%4X0]9oHGD+KNp"6f0@/"a)2'FfJ;M&=W\)B_7NYPn@Bi@jVNNZM0(u
%^!qkEF/9&[Vj5Q(_.3ETpi.]u,XXafdL6B`3HWB5<18JkIK1CG;@2%A^(#n>StP2O8_"L`gdkoE;_4"DPPGXfRFgAN>.OTnQ6M)c
%TRb+CK\&UX)Yo\*"ef7mpfoN^JUnr;UQC](VPQ@F66IKd+B$YT-Q)9)R.#bfX#39SY!ZPQd$(.s,$CRp'TqfKF@[lGECK.qiem4.
%Ssi,Gm#/lVr^'"E@#uQ9#ao+P?Bue@8JjZ`LF;)D#/6fTZI_X*;OU$?A9B8>[%\k]-;C;IO"him\.L0<?BO&i*:[K->kT0\n7X)[
%fO?SgL2iXtV@-PL:?kqH,=_t/$,T,+?f69S0k+%Z7ln)nMg.Kr1sCbQ.gOS@VNGN^=H_dCp>L$-fPH%t%%qnZVBRTKFL&gr0_1Uq
%U_cU,d/$3uj^[gSa@m)cK#HY<Fu-Cl]Sdn,6G68N.=m*X80\bWA8DK'!D&Zm+H[^*6'sr_BndAjVfjf0:--q*p^+q'EtJ.j0c,jd
%+:SP.G<[B.o;U]G<"gD,:2UOH0esl2%A":E*1BPeW$\&'U[<SRPcJUFps=s/F-MB<Ar"DpPBK_h[E*m-^JQPFcUJfSLF,HWHJG56
%o#T4O-D<\6a74g!A0]#D7[RX1Mm-,(f<ZfXAMn#)!lfrPfCKegUsoKGJW!C#5)SSr$3O#/SO1dJ;*?+E^usZOK306>/OfjL,fIK[
%85rRHKnS"h@$Go?K;^#DW43bcBT^54%*_V9h\6)92`51i.66=I[0hl6YOQWEifYO-fE.4FT`pd@q5tBg@Y&#n(?oGfUf&uh/0UX!
%+Cdit+j>Hg-'O0qQ%VhohMt_!UH%s`#cVE>LI=B9OE_b!9&'gdVLohmE5c]E>/<oeabUA_K/dNM@uH2+=9^Ud,r1W;j0Q=r9FZa'
%^l-^\n9AUr,Y=_@`)AQ:!BHkh\,hG9.N0WCfXN03dhif[eu%VQbY#o'C3X&`2c;>tHL=8d%uHo0+2j_7GcYK)F$*l?9%-6\5V/uS
%>>%?3[+B`d>3;Ab-ocm,EQ@<MV%sa6>^D@/cDepak2g\&$I5KmUgcofjhOsHBW-5+SVD`;C,Jt];m0U`k1"2YJN7ilWm7U"7.B?e
%Dl>^pL?$>a2HPd@)o-!M<9ZRadusE'E]fE^6e)MQQig\i#GPse()31*9+QUlF(mt;)<T>#,0+b=_\lql/c#/#F]WXX;DP<ef]<G.
%[NpqXL][_'0U,ka7>kRqHO_b=qP6To$)9`ce4'Fg'>snRJi%#oQ6]9D0uLBR,d;0SB/IM^m9lK4Vci6s<G3h9a\K9kTN#)%mgTAc
%nC6U&+G,=6(D/2FnZ*6E7Ylp5PDeGN8mQ5X[4)/<'38/pAAtj8j=*k5gjhIQ1RUV6BU^^O2/"AX9t:q2S$LZofK0EQT&h]6%J.qX
%V%SLCB$i@8M'J=m$\ZOH3&a6B6[4%f4fRm"(l]"->QqpS<2@$,&VR=N'`mL_(Y-,ccYi,UU2NBMQ$[_(JD[1L1\!J'"VDCC`[4Rl
%IgnZh-^esgJL9R7Pt7B;@L;/U_\aMHO7j`N"S4V"aKUI.H%)7g\4NCp?DM=uQ5%j0&!NMmT@+Ng0YtI-P\h,Wg<4K+%Sr9B9O1\l
%*dto486e&6BM@42<RO429Yssg$#($LTaW't$9T6:pJ`PkDlS*rV;+8^V?h352lEl,;Z?)MHV<r:giR^/6`Q+d2HPT*_"APe(JDDn
%*K$4c4+mt][MZ5?7ts9FecdhO8.]MU/lS("PD6`a^jL*!0q2:_,<17F)[;BI<?ncE'iY/SG)\5E@'=g,)NfRdcUsYRihjbloG&qI
%=`G*>BnE[:!S'Yfk(k)u%BpS?LKlPM&[1bR0f'h`;M=p6=*0at:koT?nMmU9MeX/O57#85NslC:]gqF6M.ff8?VF?_*tpPA@H$\e
%P9SJLHb<cX,>0@W'M#kE_)SOc>Rikf&;2NS"(Y&dE?r.<+g4]`U/D:&B]@ZW$1Ro)lNOTWiMm>s>.WMi@665h;G[grj;eM0Y<9bn
%64k0$+:D,Y6J,P,(nZ_2&@t6W'^IG8XY7)D$@-)X]#<o<(t87@6?YWb`#L,04UGMA$/nW%Y-B@%655Q(\''X6dd)`5!a$)F!qRF5
%p`pr\!`0+.i5+tn!#bQFb&q+T/*f9=Bf'*h.A+SM^h!u&WDJqHH:53:kKtQN%-Q%b>]1*h6@/;[qLj"``>XGfc(e4)LoY<V>C5u+
%'rj3ZAg&qQ\qSbUP'19teb.+f^%jJnmr"J6bcSQ./OS+RAb=3K]dc`DJmG'cW9e*&c)nYdID`i\1_+nbZHaWW4BdO82ilf=EM#nq
%5X!>bHd4?Xrm')AjN)$*oS=aKDI]%eP6tGnr7t6-;b$h:QmdJU?qC8G%0AVK,_%q`@A<WidtVBWKTO.3$p$,NJB^&e%MT1^68B`,
%DILbO&TY;31VbVDi[H?UiaIXNH)Lb#>:]AV:5b^.Ml6Y92%KN.Y]N5LV_ioIfpB)`'A++f01q)dheX-k*te"LNCgBC*10SE#3Gra
%3KW/YU&e.iXN88/$ptWC';bE$jVWkDr*0d0'8/KDM9*shZ\0#P'%2q>1_)N,@BDr,=fJEl_ZaifPC2+\e#ol53h<UngJKSm^?A%l
%@Opu)2=\Xj@eFmfT/_b*`$q,C(\3H*hH\i6NqXW(f&-)Is%#`kbpq^I,^sb",eX.k!D/?8<ae(PF!Ip,Pll?<%'n2#OST07R#SZ`
%/PN>"U+R2m:HU8MV]!b3,kV>bp'Eu`qUtTiXOS0('A($)fG9L6(&EnVU_gp.Z3l_+F^:U??:lVO(b4Mm@Z?L`T$&R%ZJp/j*nFRu
%&eSo"iWMRWJB0>b>ZG,KK@p$A'A7.p4>Mq%6lE4LA!qEN6$BNSW[MIOlQk(,EKcC3(o4YbN''UI=iSBS103[KN/^]!JW<(!!4er+
%(n6A"+DIm8)^.fR*1uO/k7O3CHIR^,OJP%Y";6O:I3GU*!&7nI=PQoi0^r'JKI-a:j'W9<Ur1k!B;";-oLoq((Ylf-6$#dFFFi<o
%b:67B#_pjL:]qOF?ASnW4g=6u.PSo<!tuH3<5S:7r&KWr!(mp#pgXOD;]%8R%jJ1aN8.2:KBQf*#\:C`]B$+*hYG$$&"+Pj,[i6D
%gba1`WTQXV,THgX6F(k:&SZmNi4,pT&qm?J":SL#<V0^D_V/BB`[0ZaPJ(T63Plq,OoVL:L.NAa(9tO_UF1d+MPrm+M+$P8.aE,=
%7)H>M!`!7`3Bh28@6;C"g^M'KLL_Bp1I0:&H+Hs)-L_P=%O;PnQ6haV@Aa3*$_,I^GhuB,+;>Cm-U%09,!XO-bpmkbb')bu7GKka
%S/AP/=Vjq:lX@q=-OL+b)+#f+/L('F#@S.?,8CrT>QqW7(91?^]W;k`7*X4`1=](':g=P>Q%@R>>!PND6"Pj*p/+juQOFPU>X>(P
%.61GCDc]F;3st@%/4`6e!?-P!.c%)*7B>m]O('KDMn*<^B;dSAeY3Ke_D5)Zpei2Vhe>]pq4<cSNI3[i/!KHk^2#Z85r(J0d#`$>
%R4bK4m!_G;!O`?SioO@"%)d&0!\1Ja.RSNrJ#_*k.G(P5VVdnsR92!A7&^jUJ.45TA3`k,L.ZY=CXME-!EE0e.7PgUm+K7>60o@=
%TH_UQ1;k"+W;B=iJtOg[0o(_Tg9gjWM.a;*5r(b8d*SgJR4ap$m%,TaTNT6A1"`dA!-WE$9G(k*(rD3e;r(3Ao=[-@D-E:#,d@0j
%96?P':"U"E8-[T)AuKg4Z50R&-Wk%%HUcBYkrVIIUG<Cm716%"1T1`P`BIloHY8[b['37"%d-;AZ4f,mesap3F0;=.[DY8i"R\mL
%0DWjE1"d2r0!,9)#BBr1!@$C\V'TNfG&Jir&gi>N:EO8O]ipidVAaF%"V1",,Es!Y1&%4]2R&JNj)%5$bI=RqPsDB.2jBEG^a<$6
%4nVo&bB-S^oDOEM9_q$U;f$]`O[ksQgR"iOCYsaX?Z&4,k[APiorVX>jFA#hajqS1-TDX(NFEd'lD>J*S"7,T2ES5G[lA"GUC8Y,
%'.JM^$_*l3TN6k*8b0e=TIhgoH6pq<c>CrY)7"6#H%F$A)/b;R4H'?m6?&3"feOdD"N3.U_eJ6b/.6,#G=H!eO=[+c<\g&;Um2a(
%fP<[F;M,t9_J)EJ)X,)oPJQe-iK;>Vnkl&\6=9CF`T`n5Z\A4>)jtO5=<j$;CsQXE[L/BDRI_)O,gWD]9aS>*VuSHN.N=ha9[G83
%AV2So!No7%!hMnrh:arTl=Iq'cjJ<761((OTf<:I_kA!N:h$tqB9JM^B8TBuF/^o`7&;rfJTHHAV:'BlHb:lZRdPQ+[97q%1V?>n
%g!Wh'X^H@<RNld:U9h[]3NH&$<OhF>M^f7A3L*p2Jt.'b.D?c];gfs\CmhA$J2qQYH^,5fJW1QNN]@h_M7!3U<N3kU%=(*6Tb=DF
%B.V0QMaS`6)2E;9`-Ap_EY>X^362+f"MR9jj4m#;8W`*8f`TD"EVb6>!YCeM+n'"5fiLSuOA0?f*0s4_@2d0(&BK6p-cW;heORcq
%lWNF-Ln]L+=[5>-28SGmc2g6cA.uk\?3*H7)J_.@]9PY!f2`WmmC5gI9-0sEO@R0aKu4Ak<+J7p'3Y!#?re9u3"Df1=IO.YOEA$\
%>6\c92:X4.\[HM``]3r9@7q2(?3o?rE^7er%,nmRD?Z+\n3Ye[GB#mj_(K7*LHfbbJt5Y)/N'=Q!PF*Gi>Te4M<rq=[-IKEj'thA
%eG'oE=L9qS-68UUcI%pY&UIEnCMHqe>eZdP%jUroF]93@Bg\It(kO[%"V#1g!7UN(B0[Mp:uuEnLbqdji]neCH<C%E+WiT(BRK$C
%BKQ;o5%oU+8ZB^b!hkkl"EoERqT*)oi`II!2?RNM_#AJFE&"cOA&HCL,\6thM!G9+h%J0:iD\((H9%!Y1*h^IJD^]67qN44Rt4b.
%*(8[_,VdG6_=^?gnFhD;J1MoM$HDY3V8ZE`;?kC+Q7YWuA>WhcB>UUc[T+WsL"Yh^5(X^KJ`rLI`AW<"%0gF$;HC=@BPOTIS9f1F
%CC$C:Id6)7b$[,&;n3O.CFJg#2'CLIMVQH5hiNEB'A$3d"PO<ao*(K;Jb*hk';sBB(7a=.Ob!`5!fK3B7NS;!Tk(KFUI/G1(h]M2
%PR8U?Q!k_3r?G'-k5@gQ`'uWedm/H9KL$rq$_,7>m0)(`#oT*iA3tO2)3VuJ8R9:"aXRXl-t-qP,@ZUhM4@F4q+s3F#R>UJCQX1O
%Rm85+_;@@/AqMm@)]!\:.8"8D3VuB!IYa(!L4"W3-b2GaR8so);rEA0?ZNB1D_?S*b]*WueBbH.`c`=iH):W[,mE`"9'UDJ-cN^=
%p4+LD@*g.%3oW+m[`+!NKD?1P"8$QXdrU5N%Se?O_sGN&I'MiNJONFPc#NI'itO8VEuAIF(g'&!@sD]5N6ZsDX<$i%&L&fe,hC<J
%&j*s0;H'g/gJNn;iBguUQn3Y(g/.M2OaliY*/')13$1X9Ya6ned,P5!SECOCHj-Z`+m"ZJ$\RR4Kg&A"0Fn/P_`h@f=CjVJ"1-A$
%R&;p_@l4H<+V"U4U^.SS"H)Q-a:;/%50`b\1r$Um^qgXKJfA0e$uJ1>&B.DOW.B]n/HNG^0,I;)V9X_Iil)U_>>17i^uo-:D_;.3
%P5_$ri`n%5!7Mu!%XXAlD?7"*.`X`ge^+ceEWK?gP2,9a8nL>BPC[Fk#ffa)=$Y2%m0a5G)8tf/##p".R$\gL![V8lAuhRN%&=Q1
%<$9:B5i_C6+pGn*5d3%h=HP[Z!6AK"X273!@5udLMs(HgS5!uIc]UF#;8UB9K2i=A,Y;OA1(_&`%EuoAW%uMR*L&NF/LdJ04I%q!
%q!;$I0#`.b5S)O$8LU@l\5<`FbE<&V*%^Yq)(HmaprM5E/SYPm9XVL3Ma]T[*lSmE"0l(SJ;,b;.O2[[8(I?ign;G!1PaXFOHi]R
%\>?i"ic5iEAY]#Dl-)r?+^R,>-:+Y7bD,!H-_@oFEa1fu#C@#H&@JU=OL[j[RIhUeqO/D+M_JX+QgZm?6W0]m@QaJ'$&6Cb2B!G'
%QJ=Gtdgp*j3N?QkOfB8q)%\A&YS#eW`&(h:AR;<S4X(oPD$OPo&0AgCo+*UD?Kn4-aaenp?7<kO3%loiM32T&P_oeRoA#0Z2?QWd
%Q)n-`EAnQAEZ#T!d*.WQJ;PeorQ)/,8hP1>hM*^!9rY(AMV_A7.,E&8l`QSaVRbs7lB16V:#@(PoB[`qS&D"[POB4/[;/&:4#<PK
%:)g/.C[`:7(c#oV)M2gTiXDdKgNA@Ke4XWU(*qq<!S[IYJ>ur\^Zg*-Djm:1WEOG51ui3sG@9M-M$0!o7N%$17'gq,R/qu(=f<`L
%^_eFG%B`*;Ii=1^4)S@JePs_*d#b,!XTl4EO`B/5[-P`kb\#Kb5gdBW1e\M9Z=1=7)KjWq,/5rVZ*WaC"[:q+^Z%)2&`j?^)^f?0
%5KJhV"j,iR!,]9RJ4a\fINr'O$sP=n_3S?c&eIfT1NegtSZ&?#_/D]">\65o/o@9R/&Q<%?K@U<VcL\Tm?"OePX:P%84aq*0lhXM
%d1jl$[NM`CDeNnamA^8`\=KF\!s[DKOLg#cc[kjB!+n)b&Cjp+LfOPeZXc'=h8`J`5+&+>>(Sqj-n6(%!@iD"3M>f+7W3TjLsV5q
%("^AQ!Bt\+EmffWYqU:kdKrtTf,&$DKR6r`EASV'$Y#nf"'X,e"-rKqr'nO3)4#AV"P_Ah9+lnXQQV=Sg%[-i-Ck?S9;_qmrA+.B
%hhuk\d[<[WZ3S>#/JnqRYr9*TdOAL5gE]@b!X6S]8_GBsoB$MC7rD;T7M%nP4s(oqL/J4QjqPD/J]@+es+$sho'eI$/A]>%OP)5S
%KijC'XkL>e-hmt'Z%,G/:qXVus,f@9DsUoL*I)I:R?XZu<tJnSB*PWS&e-ZeX?gD+?.5Nb%jTHej@YOe%pU'9!p#g!0LM'kPL3\&
%?H3Oe?08/G8uLPJgMVKNHmQh*C<l)?UZPh,5>E0Bj8MujGln'Ekhgb2!*$'+!XO%20E<TJ)$mH<YoJ/\ZQ^5o92N?E<BpQB3C<jG
%FcN-1`>;r^L'n!Q.q!mbo7[T@AEO:<T^&%UK,OTd$n$jqcP98AeN#u(W&eQf!Af&IYehsJ<.u7k^.c=.GZYA7f[),P*RO/#@0[CT
%;W%T6MU2I@Es<^uEO%&B+lHg3!Zdgf0HjFhTnrjG$GhQ=iL++&XIC_*+]V/YM?<Q&6&M(8Y6\G_2,Xii#^EKPL/]aY0FHa=">Oqm
%kP7;S+@E/p65]sr<Iu)Eq-FZo!4X5sTk<K<"!(:E'^EbjY8$?-l*eGLZ:N7Qn3Fs5aMWa=.HiLMh\Es=!LLYHd[doM,#Yf_&h/@7
%&erHMSs/bk"!^^O'H/ENY7_hCanL[cM<N0o_BsTr.0NCdi2_Q,Uu/$,$,H.d:JeAAJ<C"A.>1U<`R\k.<s;[$8#>^4JEI9D8C^Uo
%V#\5%O<mDC?J=QN[&C"D:eLh:Q!hd/^/kGGGk.10W*CGL2<PCe^`f.&(k\h'i>@(u'9Eg#k6]8Sia>cb#2hLo25iQK\->sr$.t'_
%4%IBSb4k_VR<@ich1i1>L>muKKYqcHM$%%:pPN37dMr5#Vr#lV5]Y^$hm'1;&1?oA8oG?j,`lsi'%cpH;)gDr[_W1KN^1@g)ppq,
%ZB&6Q%:fa:QHqkT`u7K=<CH[cY#JT+-XG8aVVQ`kMA-<Qq3#mbJFC#5*_tP9:K@>";Xk;fOt"3b=0X.MdA4bqS;ZO)WnI(o&Kl;s
%o0&0D`,YPTI!(Oh>SDM?(uAoDWG<Jk7:IG`J`iHnQ$fnfllLH;Re[5%!Ra6SEKqGuE5dr[02lCI!@%%ODBHn:#SMDD8HurLlLl5_
%FEJK7hrP?@:5^SZX2n^ZT5X$m<rrkB.k]og+p^_/PHX`D"Gg"#J_md+jjH?t@fGn%8"A*78=GEs'_<2a"R@8BN2PI6VC/7X:7*n%
%:g6a^XscPUj"2L8'K%>fG(mlenKPF3jAl@ZK8W4)#.PUu0<!O'hBS]tM%dU+9]STta*FhET,Up.46*\<Q@UU9cLFda.]eVl:X.nB
%UFFM1ajp5=FCAW:-Z\ThHBNS*YB%_*EYoh+>=#sV,(N<I6lSC4W`0=#<:uJH"[9[d`?>hZ\k([$$:R?F=/C9Z>#^.t=sWQOW-ap:
%U2?VI#h@a-C(DkSab&VT4UEX=U^i]->jjq9SqfC[34Tb9?<h+G*@I9"&TZOA=E:0oXgZIIJt)OtC;Z/o7B47^*)0/+18/[[FIY_V
%V<Z#OBhH[/!9j!iD5PC6GmX!b6T(Gl.lH(O.t\R.X:WAsQ=K3:lUn#gSq@;^/]#7C^)meFJ?Kj,q.C[Q@\nTC=''F@':lhsH4cbN
%%Up7s!&/SPT8OOK";7'd!g4bIdZf&AP5TA'L)/C&Mm;gT`:\'Y7>-"b!XmEgjhg>o<QpdKUDXg7l/p&hkc"btThsF*!'.R4"qZg@
%U,T4VKJD(&Fl>_8S^8[Za%V;[86.TCTQCc5!e8j0`PlS0Us:frc#UOXR"96$/th[k-5\A4SAHDeTcZO-2lYRg^<I*P<pHc#;H8Z/
%Tk6@o,6L34o,LXgLBtK4rfY?@N#`<c_#Wu2K=FJU8c!C$KUoAobsRL8_91_P]p\1GdZh8c:6)mF**NX6WZr0Rpjh.*A:)Md_dtI1
%"5%Z?^</IFi%\RQd#gobVbtNGn\mP>GV4+@ZBtF#^Hibj9Hq3&J``#lEGCW,5/)Uli.u8;l\jp]KEa<4Q"@Qff6(G^1<KRZ+KO:/
%`I`hTB(2?E+96%`^9%T8Z,-4o<,7.:OT1q69!L[SiCjl718`D)350pGH`m.ISB5Uj*SF3N7p`9+\32JVoV&$$.eEhWZ\17F6G3oU
%c6qKN&pb2JPkg<.66\pkWcYe0\;eb"gX8+4(lF*0+h7#oYq"[D&Jd9#-5Sn8L3kgLSlHCFXXn!Ve8VRNA)Si5AkjJH51ihRE"3U(
%)t'NR(#q]"HD"7gjB8,GXFTmY_!rb-_mffZfL'9\`_Zc)[[o#G,P?Qn?,]r?2HY?fA\mm<A&RjG6D0q+*`4>qL(jMoePI1^:;umt
%Pp-;!S3hh-o8/<W%-A0:WB-BE#efg8M_JitED]a!&/_f"1l'/Fk+"bZr[$$pSCL=gfQU@k)4rm@2KRnXij:m3ERo'<3tHr\qH,"/
%?n@XKnMU@T(l/J#faZoFFE'PKL,A@2KX!'P@Ho/M@YiJ;\BH<0GcbsSk6&TI6#\q-Vo)W.EA=pt.`CFe\D`4hG3PehgnN-IUsTa)
%10GJ^[eeW@;l^iI`\qB7P(fNajX8K@9,OM\6D,Y7r9H2(COl3>bp!ZKB5*d[!h>1tCB%of?;&hZ\?0p=MYpMe+*2C+D*8SY/rZ3N
%lfZ#"C.?(2it:Ll`J*ffTVhj-J]ibC),._L#K)+"^VtK8OA1fJ2u:Q!^_Vas:U<CQPcKMY5ZDM>$$ur>?X\SI176.:i8@,VSq\YW
%8#XRf.Ddl7L#/f1*qOh=LOT$Z<!3km00XMam3@dT+DX:P'9L[Z&DhpA-O2bFM!)(X6B[5]D$pTr`=%,+*uC!A^p)nSqY2Zr*.*?u
%.^p]jVn,X)NQ)6j5e:u^/N#U^W5n-b4JCb&%QSP6Nj>P$;F\q?$qZb/luJgf!PFG/JJ/$eosg;"(GG&?HL<L,E9Ps7`s!=nad/m2
%/KDGRdd3'L+]S'Z&^NjG%Qk$"KULX2Fsl4k"Y/8][6E^Q^GY#u..JI%L1&t*7@ZCR$_5ee"K$8Par+-b(uVVO+KTO,[Iof+JdWSD
%:Y's.X2)VqM]u5M8['`>]*IVGDMY4]TR(SR2J%NWOZSpq6VN-7%_[cTaKS4<T]@8,Ls&jrVMZ$F`5m90%-=<MO'a?sj1;DK_-kM@
%"mO+8j;XDk@L*9K:BP5sGq:[0I)_Q"J;3X!&I(.9eEPa6@cJo"B/pjh_Sh5XKVi?Hl>&a)OXUCmOH2TfRs6E^7T:d';Ni*H5t*-D
%GEd9g.lJ:0QkOMGg$2uYlLVih(fC_9hG)7r$tAbV!(j+k3'$9_Lr+*thO,centm.1bkMX-MA"F>Lk%T-@`H\7T9dJkW><Dn>n%3N
%;.7Ya+OZIpdUq(;Jm!mX;HA`G=8J^IBn5$2JSD+m*^t:HCE8W(Wn;5NN&<'V9Ynq_25i<e7=YCW1(>GV'@WE+@6?=Z-$H7i>o7?2
%)+\YH%8bNM0e'sIII!8^N\$NY17p4\[F`&"(sAa6LuA*5[cOMk(-R:P5roXA&0&Y(j1)_e>,X34br?.@n^n4]V*Ph#U4Fl8.7crq
%MaCNH9G;>@Q27H!4XF-SZ6]#\W%._4l8e4..alBKaC&`"G,`'4*d^hUTnGLgfL0ISTTk8h\T^-!IH5X>^>%>]j)>=.GTkLE28Oja
%MCF\B*a7b!_FK'TpjNQEWrhB)-2=Jp&[L``$$l%BjTT7WpWIiqp;@283SsZ8!;n;O-80S_;iYi;ZB*P96J8s>HLe+ZdW,L@l'G,c
%;@d;B[+#='.JKPDFgbl]8%MR^6dg9,(HSdmMg)6,ZG<9W*e\=R(.LrdL`C9ND9$BV**g92&Qgf7@Y#7krc\iC(&a:R?KqR,'n$(F
%E\FFhs0iN['r18-eaja<*6j;D0:K+2cQW:<m;dl04P<.pfYE?f<e1EGI<kP)![ctTVQsD;H#/&/l?4aq49X@3NkERVKH*H=KgN>[
%f0X!jG'b!$OVPs!=etp-i\EZ5b&bsX\WHp$"N\pZ8aKJB#3)[Y8rAH7aiH0O<3BR5@3JNLE@7pC&X%%tmtt<mYPtC1gnhdq/4:Ao
%C<m)6Z5cFSZq,CO90;%uib5eN65GhA!UuUWJZ<e5"Y.eH)5oToCnPNsF9m+Dq*<K@,XaUNQ]+bkH)7</!jq[$>R1$B(!RRI0EA,R
%W0u6sfYXTjAit)F9t(:*j3-TiI#dG@)8KAn5N%+:KSA<#KaVW1_]+K9NCa6=p+i#0.T?mb7QKJk3>V.SR<YXPAe9K'@\jrh!D*H]
%)M/qSUVQr\OFes2e%uN?en7W>p]qIYC0<8]_DiD[%C"U1@#?E]Rg4gk=!"]jpUW?0<U->W)?`0X4NK%PF%M%t2EQ[fT]/(3+V1oF
%j?gY'8VU389/_HCF%?Ncc6j]6@t25Pq"kY+gfrjNi!o+4Mr[2p$`G,\$J\T%^>Q'T&p5uCLHuA;Xf@m_TOE8a&rFUITT9O7lo#gT
%(.;$9a>=IUq]JH5RfUOo)EEFW%tL>t2d\GQ)V>9kpIYOoSnms66rD@2i`a*9ERP(t)-.!\*,n9@L[:pifJ;I)BOK!fnh+/Y$;f9U
%Jm"?L<QH%lDIJc38-WOC3ASos//jnN6!(5m>1F/R%TXtqB">?DLtHUg!,]*?H6ofB(;'pNfMj'hbiYDC5T?c,>m2`:6u9\oB!*GU
%fXcdR))-hG=0D`Bg.FN]*m1ko:Y%0Sci@piVKsPmfN,j*:?S+p#q!3[1ba\beZOMc)a[.Rk>0e`iAiiG?JR6(!A1BUoh&Vc/U<70
%0!p<o.9!_&Q3Q&V:%_+dYq7t*SSJT,h)T2@JJg.s<Rn7(jVteTd;X4Z[S"#b'jT0>2V;cj_GLceTf=t9g=>gpBHOMB9DZ[5([.sI
%5ukF-P>nNP!3X[E2E9T-Q&_l]I/to7g'_"4oTp$4[ooEB.PP3t8;23h\3ds`i'NnJ3j&ha"gh6C5Cb9VT+0()>,;>%E*l"+=ZZ[g
%Tc\,jU!9m'XM?rfO@nmHE/":u_7;HSF_DNX$YZNfY!>pZ?Ysbrd4-/@L&3&tb1]o*k`YqQ_1aej3k,7_CdP-tHe:VNf$+ak::*N7
%ALt8J@'[+s?,aaE1M?eeRJHN2=IlZ(P#S#Ej9&1PANt,<W<OiI_Y(0(b9tk'\`,h=U'fokP=T!<N5l(kbQR?$Ks=@E3MukVTJ<'Q
%9^r1&,S1HEo5)>1H6AjKU2B0ZEUX_p'.Rsf#d-2m/;aKhDWaEM<:rAf]"5\8Nj;3'3=tX>fM7>;D/&O[M?1.:TZ]!<qOqepX&fAi
%l>4us9&(&EiAM5WWha7n1aR0<FV*SRDpD'XDd%)m&AP@rO#uD$B?msDbh:("-RmN_(!]3=.Z[o?9:WfrPXH:<@6Y@Um!=&R(CbF?
%?PYSL@M+&0EdmfciJpa<)!FQ*!'d?;/$'U4Y<b.<_?Wc)Mqb>uFXtd`]S"$\G(Ucu'i8nApYI$<gl=-EAXb4U/E/3N4"?h9WL>19
%SSP+$<N%lY"?b:P6.J!YMsal"`W/'WS5J`:<6cFcX@k@i!o)2B6?3PqO$q^(RR=sFH"IY'c8Uf[k$0]6H83`NWp5)74=9c\atZ,M
%'ETo3.Zp%F]W/i>[9J%Ej6Wch,+kK[Mr[8sjEmVSYnV64PKq$Bq`Q+Z<^hD[%o_TC_@Tb/m(/3q*91#<hj7iYI'GnkjUrRN.^e"f
%MOII#+;5%0-p>iNDA_cVO`S)bFtuUN5!qpEmO.:fQ;kOFbU5+>n;4aTT4;kg@O"nYTp<qNXpB@?"KI:[/OlLT8F>?-s+i5N2TNGV
%[I#J/b(?FVLm/Z'o$h_fqINm0SiBcS3oUJ)7&=.0:[nq(#'AodZ,#t56L_/[)B+5T6MF(-l*d&\j@<EG/PrQG.COaQ,f):q&NHo-
%@qT)DiFXb`TB7[X4N^<K*o`S69_X(0SIK<7dMF/$J-Bs-EQ/pMlE93(]!u+*!,`(]NL),VgoCGrp#Lc>#$)n[8";7O2s->_#SF4o
%:Lr(S.F23PC8?f/J.]nM;<WXCO7PIG1Ch&9ddptn$O?F&A[%K9,*1:U]E"(7lD0>>[^iFnT;oa5]R^^B)P`mcn7_%5NE#IA!(]KL
%4On.-?nUI((aAX/:$Bd<^.:pb:*jXD*j$o:doOopnW]!)V\uJ/EL`pEY`ot:ihSO],Laf'OP7T[#:aYVoUV&Ogd"#M&Q-09WrXGg
%W`)b\*!$W@DM(`KL'.mt61-m;i\sFp,,bFu3sg+_VKk8?Q`&/GMXfsn:>sn@j(KkO#DUUHZ(qgS!=:PW(pQ=LjV<P^OkOLFY-Fm*
%hgIV;lIM'RLpI?eON%fG;65BGJXj$aqlN^DGTuL['$-35Q[!]WM93gUpH36*Bg>1%Nq%cp<f#<pl@Zp)j(4)'%KYRBYi(0OlW@ED
%6E1F#+g9JYZY+9;c^N!:4X=7AUu;=6j>liEk@%lP6a\2ZPMnK^7`l0rq#t.+E#TLhC.\OPYD!I#!G#egfM]`b5akb/T?EH6R^?(F
%M'$6VLb$Gh1!<'1Ie-;UEc[W\R"P<kHV22-']Ca2LTp=F4/bg5S7h/[lL"=23:)@A%!8H[:(SXc"Ge6<C'Ue0W*8B.IY*8g*aorL
%6I6DDcocJp87$6`&GI)`o<_VQNfVJ`5#C9k!)c+q#N5,RZKHh0,k88G(9F??!Pr;)H/)NeOHB)0_*A"ESLED4i`4n3R15aREeK`e
%!=9%W^BA@73&hikf?Ae@!:ZYQ9i?QNs.VJC&g$At.;DQt;qHUEK*N3Z5S<PXmP&`m>S*kUDN_i5c39TaEa>%<KO5++I`@RmR'B#Q
%MhG9[Ot(#07rktt,qm4hNA2MmJ@IXJ4qa>FNkrh(5&1lk%ofAZL"7CGEW1<dDUf+8-.&"r*mkqdjKrQ3%h0-:I?)']</k"=LP1c+
%YN?cF1;Z?0VS#Lb"h69"9*SpuT9dMj?]c=DPk64>_E_869r3dM>dtY<$Uf"d15Hc)TAt$=3oE=aWpKqH]KcsP#C%^(NWUBs,XSca
%`/a$`Z?dAG\:JCQCbWqb+)/^Wb:N9kR6=%4BE2!B/q]*\Wt=tNq/2ZuA=U#\QgdFc1:^Q2Tr\+`R6#!(3W&_`(q%W)>hi/3!QW;l
%[:nSW<QZ\i1"#)*=lA9@KKr9Nn,n0M.KFZLpk`%q0rC?,.rgLB;)jXR#/2'L8.pC7.2+ptnWHU#.dtO%3KIPD<lT9\HO13TlJV&$
%+(r7^DA6XSZYeX<0L9GpKKGGq^mDscWhBD'IeeOWlb]PCO:Dr(?!_tJ*d9)!Z4^XpZ(gi"3Ch-5Fc:[iU:SLFohlYu^4`..cVh`l
%bLFT'n&]i`^,*WMFL2o$R?,hmOuM9__.Bst94cf,G+Fs8,XMSoZDb'_Qk`LWUqm*o0?L]AjtQ3CFlg9#k;[LJ+)f9;]e]Z3pbOU@
%+DNIIJh3@t<r0HH%qI$IM"j6T_h[5CE&2;Yl0goi(/d-mij,+Hb7EK;W`C"5lf/j+>Y#P5P.4056@)uZ=iQPbq;MIK%sd`mir7QJ
%O]Uj;aN2m)jCh#>^nuDi9:LZ.)lomG`.YKS1hJs)6dgle!-*"\`JC-V$uu^k$pNHD`2f=fhF,Y`[I0`l>f'Yaq:.c/J$C4o2mK3J
%ORbg!(T3Q6Bi\Lo(8KCp@p)u@J_:9<,S5Oc)1['YESaHh$K\B<gL.f'RKO#([ORAmjceM0bRPU[E5K8)Jh/S!V2/J4(OO\jfSGGf
%'bkB5?1I!(.3'b$Ht&%AOHOmLUJ?2a&>G)LlM-$3U^gJ9Y\?G/gR.>,Y&<5DnX^^ANcEqa`4ug</XHTL;Cg;=[lYnGpW8b#9VDj;
%"8N:/.8QS1g)-$F&AVg(EljQ#\U:5I`._Z-SHoWeT5c#?6J8J98s::+s1\8P4<SU0o58#N\VY'PaU5!n87UUiMNj=T&=1Q`Y_\.d
%ZXAOC@\5^Hq.N99qm$D3P8^nE(ae3*(-ERMfSFf<6^?[hhh4KhQl-E^8?DoFp;'`[p8IQX3nG;H`03imNGoTq;Zd0'(RBbU2sL]e
%RK8^L6G*C4#c"g&g'Sa7965'>_?H?2]ca*O^P;EBR"?rt.-i;==FPWt1b5k"DKlFq>o?XD,Z"l7@[pb^eQ^kR?!fb_C%tKICs$W:
%o=u$9T-f\D(77tglX>8L.q)9<Eug_,JLb.iXsIT;j8''n`UTU0n`BX5M?I[C/'dBJH6?_<m.E_W2!Y0m2'Dft9F)nJ9.ag#_#X'$
%O\]R8LN@2'#(bbmXs-L"dN.H1,QTN*Mr]hQghaio=K.;p#ul#QpVF=*PGWHsL)t>3ps+#i]?*eV?b&p$J@_p/_W/)Caq,^ljYkJC
%RDKA,![KY"I&9*i@"?G`BXEP(H.']rZ/#G#G'KF+mE4:IbJpUd?&D$/9od(j&#A.M?0IBH!\5:b)1M>n%rqL1SD4a-COBMsX4YX7
%V1GR9BJ'q5rAGhr7j/B#r?YpBG[tDT.c0"u-G`B.[uO)`qFX@>YS"r$epWZ-+6]Y7`nqTm*:YLfJta_0.PY%fHF#Gi`u9@H1^SPT
%'GMc@#GaJ-&Xn0)I+_0n$Tq[8"^`E=-lFH'6m*Hn<uo-$0r\*61KqahJmQYo4>VC?2rudZ,!YTsH&8;@M7Uo0GrrXZ<M7$eYNXb(
%S/%o+S[[dSKtgMJp[@0Snnf*q[B[?.Y^qLiVhYr-$3W#6YBiV].c7T]h_C"/Z'0q3?%BGD>[bE:[b/^MNTfh1KsWAfV5HWKnT"D.
%UX7o)7PmMsTeU49M`kcdH&8Es:eko'P>JPo[PA-Wh',mQ1YUJRe).9&.S/Kta!DE(ppJaddZ*JZk[Yh112%6ePDVB0=&A,L<[SVM
%PG'^E15e<;'VZk*>+J+W,aN4g@92AqJd*CLMA6=C_9oppC</)jQsW54ol9F::-e+loQR;IKsF=>,)OqZ$A8.hRP5;H6.a^6(4/n5
%Rdd3gH&r0+2OPfpKKF1j0S';`X]"aRl_0'kp0!7%V@j6q>oD,(q@8,95p7GHMaTN/k%bCfCXti^;+,(#R`Jr&ArJ%E.QlD9_ds2]
%j_GDl1d]1_*(XoERdXB\2'e8FEX[\aTAVSDaB&q5qetMr!9mTJLMc>Bmo`FD7+#BR-lS$"aS/[6b)nTK/O9M"n4&?@_6Ujj>jT*I
%3F73U0"bFDAg!f&*M>-K@3Jii\eP;Ih'?7lk\:rA%1m&Pb]hNrL1j19$;G6>1DOr"_TA!`8JjgN0kh3fH-e+XCXgH$2rCrj.L>_g
%A$u7;$ol-EH^UnahaJ$'7"\/F>S.4e9;0_iZUP?kOeFLC15e<;R:U9%LNFgMN@tP0!qmo/nqKhR%Lm2M.g(A&\8%n+<NH1''h`^D
%7=2N;.U(&H<WcLt8mnguGt5.7>0MNQoZ3Ag.WNB,>8J4-Z9X6P>g'-L!QlmX4'ZZaqGqL]!bMmDeLQ2oou[dE/L(FSq#V&*nVo?!
%+VG=U*!L([+S?"cbGnYFasnIpo&m.uZEOXF+,_tRc+pFMj]5;D`?Y7O0S\N!iUTC8:OlF:&XPf#ph?!i<K1@r21h+J,@J&N!g_Rl
%Tq!R7nG3`Red)Ir`'q2Oe7sg.^Q'M-TEKhB^i#s(WiENCbn728i2s\M-4*dh[#FSRmf%((g6$2NQu>MI)R)hk",Z\*W0MoFUl:!K
%?*OHA<AZ4`qT6cAZC#qVVZp;K?mih5Tr`cTebIVp[RO0O%s'&I$bK?AH8VX4J\o!Qk^$f2<fQSnX;8CYfH:9,V6I/d]4iS4@*dkI
%frNNRjd)VPf/It-@V]9m"31'cq&sYsi%eTc`@:N;q)3._2o5`p%Mi&e]4e7(X*)6I*"f`tl"0;ri(F6YK9aLec3(La,\mpohPoI-
%eEu"8aA0$u&JOkp4#Ff/*]IbtEW&a$Q!#*-l`^V1U7jGH:k;jq7fu5VYS!-iEpj'I1dT+g%Wa[ok#K3=!L72WKP>I@G%,6ZIEDOk
%T0WV-N'uc,Q8ZaFrSU3f=_P&TaO(%T&Ls&E_":-r`8*)VW&BOPNt`r^iCb*Q30MHkE$5nOf83K+)*l7N764!_(YuRCW%Oa,]Mq+T
%02!\dSg0)uo"A--EIkB/LeEZUkjcoefHa5RH>A%Eb4tni8Nh+5[OC/3UP&i&,VpPl#BP7-+AOr9c>s]`Q(%lG]Fub-)oQ2'j"`TZ
%RTRKcP>L$l)Uk^+Bo]2`+@'3\CMkD#,Y.u5Bn8ft+?p<gi9W=gLXSl>oN8084JG&4A:T"5"&=YmnNn:hm%p"8#m]C9K<UASB#S?J
%\,oT0N_$g+7ms,.klNVg-V;eVd_(NY!/2*[35'Y]L'TlcNa+gtX,@dKSF,ILOp-cQGk`D(/BPT-19Ni6-o3MO9R?l\(rY2cWgJ'_
%9fd>T8o:;[W%Oa,-<cf5=(%tG:W@=7Z%^5#nlRd@=;"$\0T0Gu*p!I'5>!9Klm+<l@?Aae+>=U\"_t*XRTDd!3AoK[.AE8&-W1Z#
%2>8`Jc:BiTZu/_F2I>(A1_<IM5h)%fNi,+Ds-<^9UACX,o$YE9mRV;\O>0cN4ubeWh=8bDK=H3(pj%SQ$Q=sr0B0Qn:g2-!e@d\+
%Z1`jb=oJV?<C%C*[RfuC'Df#!L65W4&B'OhCdtIal]2\$QB@es3>&S!AYVcK*7>g27R:ip->Yp:e!e;?.&+;':,_>hI?@Or)S9f.
%(/N5!K2mU&8@J$C7,(K'ME8fkOgW<=NOqDF>c@)Xn9qhXI@r-2:9`aD_R6q7Rs?bnR>lO*>+Aa378t)MR?23J>i('njb4*00as9i
%/mb1D/(e*&A+;bDSJ<"7O9KK^[`Z,Z.%qFsSuQat#Zu8=31NriS%*"VE@U!Zi1KU43*oU,T*SPBTEnYCTa4bDU<5Iq372;=MI7`C
%MI:">ML]8nWeBn/MQc0F&5,W5eZHNj@n!W-CIQ%EF&g*Pa!n01YrIhGE3bjR75p-TAOie[nj8eKk/.b*b3g#Gb75=Y^5=NZ!R"5>
%)<W(h]#+,L@+"dZmMF\4Ano]o/*"9mkc=P=&pMR3@EcH[,K@"0Jh':o9?pWGi?'GW_Bi]"d4&R[(>U_I(*0_:`X>APRa8l,>'/(9
%A6X$"34<%5d0Nitd`OQL37/JDRUT:R=]6j\nf=]KfZGTqV"nc^OMt/Y[UkE'*4Lm'QKtE8T6K-a./u9K'eW`LlRaJZl%cnj-^l=L
%aH]V/5kA!H,c)URm[Ta?H&#-DLn%,9'M7/\/#3%&1fq21C)tJZGA>+?]6A",bWC&\S/2fd2;_!-G^25DX^cWH:T\ke=&5rXH"X=>
%o8aPjiUSG(/EcXSq^q:1.8)>_pm"]_8FtC0.i;m,q^4:)_:ku0!QE233.X)#J"4jm=&A].3G2/K+aJ9.\LVr\Y`/->R]kjh.46D0
%(+Ro[mhdN%,juY/]2ESXb;fM]dD[%)Y-qu#Vb^dDcJkn@AG_O<.:ergYQ0M?D?/)S>nq\)bM+*0KWds`PnEuB\AD7O0dZS5F^1HK
%ni-r?hfKdh5TaX9@S'9<0,Krg-1XH!b)]dQ)$"B+GioO4269S-*8>Nj&A+\sWN&f7J0k8P$qt6BpMF#_A9YM[0aGWoO0?&mX_Rn[
%1/r!j+2--Od6NTr$F^19'Qg@"eXu.>7R$6rK:kC</&`._26]p6+N5KP\KhP9lNDToJ5:b6JE2!e3-o7Gi)>5;8jN[AdrlL=o3JaV
%8[/?6o#[5OBH48s6-:*DJ.Cb'."W/7cTu2N?gYh:XBu<WWUj,8gJo6!Ti^1bmKG%\$$V;4SPQb:D@TE]mRrC<CtHqJXn1"J;V[uS
%l*]00_,Rnl:bos_^JiFCN,q\1UW/G^j]I7mNSVrj,L36C36%XhB7Prp%&UV#Ti%B+g<)C@d?O/O,@";,>uR[prNDBd.ONiqX0@HG
%<A9:]iji/[p#]^!;,P.^K$M?>s+[%'96&r.UKlWG"3SGX#:GO@H/+9Q`i&%7)e8qOAGEs#J]T+r"R;O>L1Q9s_JKCBK%qiN/l'O8
%+Gi5CK1`-q"ct$!dA1/b8Pt^&T[c,P.nb^**Hcgt+3_P!%t)_G05eDe3ZeOCO]5\j;9E:,*8\J^/"F338'pbR=27V/Go<9s>H>L,
%Kc-s<l9!#%2,b(lc\"&ASH2^e9ig`bdr`#JBQ*-HdCjjt,4;+E*I6/Zp#V8X5:Mo0)6@Dca<Te&0eKGD(!N[^dKrp5ZBJ1$eq.(b
%=;\'33=P)NDn[m?cV]h']*)pY#%k8Sl;k`5FhOeP,.sXQ$_$Bl<RV\-B6O6ToH[u+8p492jEWS=@U)M[i9AE\:25lG1Oa#"oH)+q
%S,mS:?GEFO?oSD8&+LA7T=@]IO2"1A2>HS.\stc[O,A:/-7hbF!6kp7"m-",W5X+T5-&`6$WTa:+Qf/HJfnjB.0j$sYRI3$n_5Oh
%4,X)FJu9_K4%_'QlA"3NXN,l>a(G!9>YeY"6h[guoBRWm!.,V#ho-I"rOp*Qid<8=#2puB$gjU,!5LNMk_>N@NOLNgS$T[h\Omd]
%1n-uVn-JS2,_Cq[>p`*HPbit!,'1g/f=P-?XC>7oN>Yg.W_9_"Udh"YPoGaj?!VJ#88-6nr7jAIkBS<S(R+>E5Q$OCXA7o3Eq5U$
%nS9ktG@ES(bfA.BWCf9XR0DVF4iCAh2DYaq7m8G1.>,7'EV#g`@)``Y*)h"^PKsm+9,,na@u-#ZG"@%l7&![NFoeF@gW\`*Lfd^-
%eQe91_n3_>@N\OnJ7]n\jH]R^:;3Ql%pGb.Vn$m5OXrGon6UYE6Z6Q]?j?@gpH^G!Z4%R@^g;7A.q)7lb6GO(@q;u%s5*\!M>P@f
%G#_U=\*V@Il?$@H)%6]o:7).AdOFUL`kKh6F!\,])HS:XpV"8>9!N885<Q`DQ_E.V04UFD%P.m;)Vg7;:3eM$p<B1hn;@iX<f=("
%%f%MgEqHq[Cf@S*S4?788rIC?7;I,3PkI^RhrmM]<oB>s,2,eK6r0LhfBJZCV/ae3H-QpO^:eX2H_n.Ag/cJj`>LB<Rq%KKRBe9B
%@kf`t)]<]9.>7O]f\FBW$&c\>0:fsdC$OHEUTfUFDQ[QkX1GTfR&8!KF,:ka-G&e(p3S;p:F"FF/^NY0D0`=P0AlK%PP<&+ps%`l
%CR"0rj#];V>8]@@jMU>nLRd'a>./!YPPJKuYI*t>cQ[Wk9p.rAmqW'qb[Uq.Zo+S:3Q1?%Wp&DsAZd36Q6d/u?C1@cXhq%X7161;
%S3P+C(Vqn]ERd'\,Q'`53mZAJlIt[4Zal^oQA"t?]N8;6All,sf%@`T*3a?:ZR-;6`=Y3,BgqA39/%FLF`WdaS]Ft^o+V6g6k;sb
%Fn8AB/oA?sIAYoZ%rIe16iQ)On8/-k1u/a_[uH^dnYZ,fPhpPU;sL&=I@VF$<NY4]kMq._@?Hi`02&^90UTjL%#clI_H&HembBKi
%oh[_/i*"N9jrf`TO"cOBku:@2>WJ/l<L7PD5,U=j((J3Cg-7^.n[P*@92kaQLY<\tmId1\gbCOG+Ledg@,V\Nc)L]SrpNL`[o#&Q
%bF9rEiAOqn6r8`s5<=IeVu7XJS2"@HHr_6Ep9<T3J%rPZo/OCZc4mhC*b[_Zf]A'c@4o/^Z+o[7a1#7UiXD14BMP[@.9lg?;lPFt
%Za[k(!iP]0]D_H5Z^qI7QDrB7^-IQ;7qTuI4U6/;qtRUTh=h)a)(8G0I9@\*b1H%C;0H3bC[CcLcecG6Eqh@UmNR.3=Y33R!\OS#
%l^UFAXEK\?adBUr%>M-!)%Rj'%E@MZrq:IK*Q9R+TS]:$l?_aFmp<p(712k+IatP\*>f8%O@TDR0Xq/u:Z)NC@*kg9A4F6hf(JeI
%oNH=ULd8fG@2U$_69La2a4,J>r9ccfbiSiG5CtdrFF&#t29mNL'Xc]PMtm0P*OF,HJ$U=]Z@JebY6R<e&/%,T3d!dhfWiU+Rme#A
%_>r6/Nq'Xt_l']Trr1N)Q5OI'3XcW'X7f&I9T%)Z,>qcT(Ds$2\?PE[:gBt9dnZ/Z!p'!k$lu<4dNW5f4(@[oaA^>7Kl,Ik#iF)6
%IhFRf)b%(mW7)CWLtlD^E/#*g2C@tWh)9T>Dk$+]6O+7%PDISMEcf`j-`DPK)`sIcEnTZ=99:Dc0I^nS92N_>aX!J28KX1tfN*H@
%^>)feq$DI?0ba$E)C2"cLAMfmLq*-FTP2%3:2bU8,"b#U?]jsT?=6MR=jn"o6,e4r1!+MU@:ZRX`-sGCjcYq&@YC-Ail8bdY%m!K
%iG9!-dY-RPrkR3g9sD+p[M)pJZ<gU`+7/?<J*;%lb-=]s)r0bbRs!J"UCVMEo61(O1-s8#eutR^Clb8eah(E)pt%3jd/.W@6e^m+
%k)sU+'S]jABpW.gYNb(AR;K]G^\HB%T#G%5);Ist)VjS0.GaE<d4>&.V>RIOkYFi@P],XT`C*2.926cpo1rZ4&:PlQ:,]).BH/]2
%b;n0X]l.8(AU_a[jAt=d1XbRhe97B8!-^Ii+e<NCb5QuAGtUBu;_h.Rh4YN&JfPTGAnNgUbcj>$-j%5$B%.e)&CG)Wd0VQ*18K3m
%j`R!KE_:Wun8>c%Jq&4#$/eQ;H=d+NVF1^sPR;]C')0f?`.%*.=_c$'4'?/Y$88Wt/-4`t3]ibmY'/Tcq(8M?f)af)(]<U2:&oLL
%d4>*`:W_u3nZVIR3KCAt3o*<,C?l]FgeQB"F$BfPb"e_M>W[Os"^N+g^]W@iXmJQnTYKSHE/be\dV*MJkQ1S,d+S^"TPR%;aJm0"
%g`*[<[5\)fO/EfP;f`:[G2c&qkcN#/Z4q'5Lm.'k8S*,,49.HF9l>7k`Tn>$OJh4DU&feq?aTjfc_+"p1#sbJ5gBJ9K3Q7eU@uUa
%p$m=Bl%WZQ@TTM+c@!8+Zh7\T2=[A<=f\HjMV\neAdD8Cs%KT@nk%Yp3frt&m9nW0DC^V&KiHBhfoThsc#22(Zb>mU;7Ct$hVE6D
%>FUP7:Lk*QI'gIr>6gD]@IdDrSn[_4T>S]><sRQ^Piub:,W`DG^1\Nf2s9^hc0j2D,+&G;(1fLnOs)!Pb-TT8^3P]+8;m*!-r!RD
%09piE.r>rAgf*G9[q1$=p5e'XK<lG/=<k$V:b8BQ*tI>^6>Mr6pmM'bF8to7D;jqi5)S2re6dE6Z^O1Pd8`BIO0OE!P-N[F7hIu2
%2H\'7@ak!](/hH8'LQqGjL:L(9^:(@>lJMp#L%0\E:\#5(RMP/3'YKi0;[FLs1_=Y2miIUEY#/E5!(-I.s!MHlel#=@>;Q.+q?kN
%oH;&LFsj:4fd`R\\j1^;C$)oPojl$Fd2%DZJKS[T>nq8VH/>i.>rUg0/seV]r+FPL*='2%q(YZ:Q`K_9ka#O#7dH3&au=-**/u^#
%.O/^9ZY*+tf,pO1C%5^.O1uEJH^">,@#`cWeZa?u:!+AAL0+oF3Z@hTQJ$*q\J!1LK;:D>eaaQuWdIX<Xd.6#B$Ofif/k^C=;4$O
%8]`pG:^j?X3RU$EJ"B\nb-dnN0&[Dc[h8j,heHF>j76_&MX,hAqO7$LIq,:uX0U?=BrEW6C+Afqb[ZheFn6I.q/l"5M(GSF^VV>K
%]Wb"Y67.#B#Yh=\Vq$3l*m'B3MGR#X/m02M^4TK%lg-"_Y6QD;3Ri!]+Qjo)HP?*BAZ!6S`LS38iO"d5oWI&Q4f`)j;c-/`8@0;n
%Fk,jh=f:$J"IM`7)F?CS%T;FI53*lAl<[%c8L-t]K<eJ4eJmo/(,fYa>(5kkFj7n!6<u;8BKL&R0BbCVZ-c)3erseZ01+_#G.bG%
%UG\jD,QB6q'`Z6EK:-[[\lZuR!$X9PmCB0[4`E/39geTs@XqNS->uCkMF\O_5F*;7kcO>:'nOX@7UcqA`0);\(>!ohi90=Fi]Pa_
%.9ara\q='a<uEOO50,PkOb4UV+T1_2@sM'4&lK]KOO<4<qeBVGEN)q3TUBqEr.\L<_h88(l@YP+)X\uqpcDFifqdE!jN[jaJO,S_
%3!&YOX]o;helYmT)dZ/B6eAa*\?t$L-,?<Mg#6p;+T)f!JVXkfP#ikJ3k$tam22q687[Z&V`+$J-5G]^mXfhh(PMji)jBYCgY1'+
%r]D&q@rA>q$B!Go@r'!@eBR^&*:ZR7,JITQ'6\9;rc&`:I8*-tD1Bt&F%+3-bHEB&m&J:sj">RTd7DC\>`O*3S&=]s5\j7-n8\T6
%>OSbBf_K#,8qYEErML_Jm&HYAI/J3)X,:dfgkK]cQKn(g%G@-nc9o'Lf:s$%GJW#oRd:/u<=s6@D"i!>JR+T[+*YQeMV?$SH&teo
%jB=q=*P^C7CFS@`He;%E]\\hu"1]\7if>JVl?gtUOmAYJT',JhZO=pK0^[dXBQ6fN0t1j313p^%M2AfZ@0d1@9:.W_Mn&-]a3.gi
%]n+ceO3bGrbqf:Bh;eha3Md+5q*hT=NZojO"SD%N<h7F!6^TEE/9b[Fd"t*K3a5PH=QTK=.DKVeDgY*3Vb8^$N&aJe=E+U[C:u4S
%cdphB'VDUaF/S*GW2*Wh$4.if.le,/P)XI#IC5.lO:=)$21\1r@.@#b/k]U;B?jf=j"bq9e;].bdrPfgG$sQ2J8-2Ui><Ge'(*Tq
%TN!@3daZ_Y`&>qJ4U[ZVP"[4`&t@P_$X9UK8V[M9V-V?S)a@PdC<(qP*SEG4^6ILjdEh\N$H6C99lH1)!GmP$Z:r^$@4n>O5C,iB
%K:NUbmG_RPqnb%NmM[6fpp!iI^3jmj&9e!(8tcn/Y*IW!6+X+QnTf'o[8.lM8W;#+CPcpk\=+HF4?:S6FR$O&W\PYGE'Xo8ZZKs8
%ZaoP`/s8%a"PBq\R!I]]MUP@55P/`Y7WP'cHA1s>_@4"hBiQORV[n&Tm#d*B&V;+F4c/tIBa>>!!"%I!2Nbm'3MI8Wq)UNC,KGW,
%0,a./%h.L63t\af\,ACH+Qe2j8M'hF21O(qk;=WhIKa.kV9VD5jI(i-J8@+bbgY_/p?_\4R)mEC3Z).Q`.k&YCQ7+N0^5t;TKDDR
%I8etJAj><VP^-]]b-\:Q>AZl"8QQZR`d=[(o>4&p_+D=_K&TBL[oEMci@]60_m`:3h?j:4BT972*a9q,YK,3#gZu\@nc])n[t]DT
%>=FLsKBn<oH>k05N]sb7*gAktIju?X<l8I+"uj:_$KT:mO<jD8f;Xt4aJdJb#GW8;5/C@ojGff8k,aN=f/c6NHhXVig5.eDq?KYZ
%jd(j<E%2eRIoib\;(;+BZ]adtfR8+=?T%qNQ0[KI#BF2p?(&4RJRJuc'gj?_>rffeOa$7Z&`tq?FL,8rKI"taF-^?t7QY/D(nlQQ
%Z:?LumBWB9KGrTgk.fqHn@\kDfao:P3XT!l:8pkU2A;3$AM%ILKj8i[(";k\a/<+(OEYRKEuZ>h=WJkYdFKb,HfbVN[].8,.O,D:
%O5tir+aFs@K$_<HI[jebCqmhu5!$Y'5+s/H*;bRGSOR1%?A+P3WF-MiAE:W7$d4`Pb'K=EjP=+^Z<a(;8sgaZ>Eg<fGh(MoC.c<G
%Kd\nW2#e+fCV!gtW0Uj6=[:"DcZ1sVJ_#VsAd]$Q45GkK.n8j6c,_DGa5-\'r88'oJ@aLq^n"bKJUb;XNBX_u?`%pngW4XSmWQ3H
%GIQJ=Y.T&#>O0#Vo72nhHE3ugqnC[MbL[i>qqVe:g&HdKOT:%mF^tLAK2R4q4*&.+"-UG%E@2,&59^QNmO[17gV#Tn(adjXK,UT9
%aHE`.NbVSq5Z'M82GQ$3V]Y3"8#7N'"aIO1X5fIgE"*9@Eiu)DDUjJ!%,9E6PO.uhS&A0J?nPr>C^j@H]S7K<=K>*b&-<Ziiaf"C
%%#9-!("0QOh@_VrO&uV.,.-3PjHdH'=ZlMJ-GWQDpSN)LXhC)"<M:sAVFt^BG0*U?Q^,cQ2]03^h,\G,KBWhe;^GWo$=HL"rB>eu
%:1VMFb'0=c7Fs&Bd`#f/du'Ck[50&IP`DhK/(m2i'M=7<!o.=De]_U(nNm85,Y4@%LiM7IGgB75-dO'KN^'*hhW1Pie1IEo1ftVO
%eF`u`WMIJD_kao`X<!,7#EHDlIUk0($)'P?ECc-o]SXc^P/He1s5Yj9>W$>Ef#,t4qU8E=_/2sGBK6L6F0aeIP4:Y4Q'ZB\khJcN
%B<V%MS4WH5GtI(Y5@hHo.0Bss0XrE'lH`XVo"W]/l0N2H*XAA]9sS,b?C[=#AIN=bI:`!)6T4N$jkA9c1'tUZHI50#YgXuEn1_.1
%Gl,)lM/>^X"("lm^(52:8R=Q4>d#'EY].kXZFKW86Mb11GjV'WiZ2g`LtsW)C6qFtYD@MS*3WjCT`GIHf<F;G.\oX(Y^F(b=\CXG
%CX??sT,S*V7^NU<Y9>#=Y:><@>@ahIP&0bSDhW197(#tTN+2q[>YiFHe+T/tXt'08++slD[`",:.iepd9k$;D\^u%T"g;6-==%-"
%U+`s9o8mq*b#dM-ioR>(G1"(*(\k`,'7-\U<5c?@?HJPD,C`p!@P,H>Z'hkAe_PcLN]&kn%QK]>^s0uKngPs,O-&"7b-'IU8/HuF
%c49U.J5R*V-TgOp<Ot(X(`_'Kg=;*,0sD!jA2hA(P@eVUe$:tPO#'*1%oYuZBCZ8N7MJOU)ko/sI'T8P*T%q.]rLj,KDl*b?o7u6
%mm)a*BIEFW4SDLW*o2CAW/8T;o_QVbQsWUkbnX^_Xl._j.pt[]U\;-K9a`hpC6oWA,qaijc3nU(5sb*Q-eBVN%7'i*&ORe$;Lfe=
%+I.u%2t-*EWTTn0LgGQ]NgX<]CD8Q$JB,VX%9'W)N_u=ke*(L]e)t+HOiHj\HZn?+3_M9-B$7t5=/PG`%*Wb]+tpCmC.-(KNT7`-
%N&>uVWgS^^R3MOZp<*G+!Xi;,=>e53;XCkBmmd9:Cs@3hA:%lL-s&L"'.tb#?SQ^mLgIphc0*)/ioo!U8^H@2#mROY>["'t:7':M
%>os<3>A0Gt+h%9eGEFm7UkEea_omWf6^JhXA"B'''*P<F,Il+fc(ALB55"boH&)kGhr?"QDjG)G7st)@PBFCDX`2;2!mjVP&S27S
%T8b9[8\Dh^>Adtk:,*a$;=QP%aE*L\%,s94`qF=TD\i=ZDd)`nDGmDB5W-&rB\%l/(EaX;?).W:bMOf/q.K9d4I;i[(^"+DF`_)J
%,WaD1.bhc)PD4uPmT2R@/H/fG94$'V312?f\*:.Yc9m=qPhJPiQ$:^*%I`XXT&E2:cVZP19d#ROSLHDna<^W*#H!VceBUIRi7hbR
%1RTWcqD@Y9W'd!pRaTOG#7p'+8^%d&5\9RYVH$%"%ltc#hOX#bIt4%AZcsN2k?JQG&&`ma4f,/_1N98[1OQ5$>f`oD?J1rPX*1Tp
%A!E*!E?dX[_^%O9>]5DNoI#t7*!0qFm3$&A_=7Ngc4B)P]In5n_\qUT\jYl).JYhJmM`!<g0tq9,AOfR?*d<k]^JU6(:p&kZ`qpG
%%DM(O^pdS[GjbS+[egO%%05nr&6r4[$j*!1+,4)<5JJ%aNDcm6G?IClfVKIeTA8.-ZermYF^/V]kj)^&KPQt=T[??R;CteRA3]^D
%r:&'a/Mggt25S+U,uY]47'hEp#VYsleQt(nobJNA'(MYsk(heGn'qj%WOp![g99G0ra+8"^<OTjf;I;W^p9F!;9ta<*"Iob6FM"'
%-:<ht<1JJ0'>!h0EG)(W2^erE?RXXGdrorUCYA%O^,`e@pV<=\%rrJSY7CX"`UZ&Maj1&OakGeH0)3iqd&e26g.pI:pe&tYlgL,;
%ncA6\[XGEW]JWO30cIgJ%'tSQ/!/[3;q:7WGG+!F>7)kP!upM@3QA\ZFqoqYC4MX$0^U-WVpE!5nbL2\K\9G#mH>]#q,&ej8=Ak$
%0a2WLXM:Oc_bT.GkEgNJ.f;9lD3s1=iRGX-dLMjP^O=mg3o*r*ejtaLkO)_KXk48h\jJ$e3o5CrT3jeF-1a"3dZ?;7E7/\d'c0Jd
%gYG;1pMgZ"rB[WQ>O.@l@Un('bSJiUU$+Q9/;4A`Mo&Go_RCGUHHgEt'g=@Rf,Fb$29)Dc+"Om\99J7#;8_4O-EQQ8VoKFXD@JB[
%G6r7j+$V8Nr:"3\YD3423E2de^+&moZd&$HA?O0QgWum*DVBf[EAbr!h'h!4UItVM]:5'.pZ#>.QOrBc@f>=P,j7+#&8[YDK.^5%
%;g$:CH[5++n&'9(W*bskl:kGMM0t12YDFQkhgd"j;$JJ]G9q<\@B6G;"4O"Smio29mFhsM,jEabH77laflTTYQDd&bfGH2l?4P"n
%Ba[<>DX'(;Ke2+=3sC9YaEU)3m/jWL>3#mr":O^_Q)t@N'TIc3=O.rPX;o@i:VQ.1mjd-4OG5qS,^f:hK>Pt&LS^]8JH:2rd.#R1
%KCb'4=+ZA8`ZU4mZ/ijq`.@$JeEU-HjAE4=EF-)r]6s=2(Cpq,)=5Kc&GdCK0NcG5fR9Y6<B^6a/Zp;,a#MVZi;egKL=_nCHZR(-
%Pd4Ttn?lPM[907eIY9r+4@?$UfIT#$=$[`u58M6<_kK@"9t-cX:%)[p`8p[s3IAZM+T\F-bg+[0eC'Pi:!SYf5UD0FAB"50aLlAG
%8iSU@iZ7tm[gH5#1"JgVk5d\L6_-l]qTTA>TCNN:f&Q'=ZUS^u$&P:Fs0?(a(%_cgHmV%<icqH'MZ!'@H1G$(FlF4JECg),-DB0\
%JCJsnqA2"Obid]BHDYMV"kqr%G;?@V[Mtp3/*hM_OS1uX'Se64D2ii4em)]GZK&I(Ej2%,Ycc#=_c&he'H4%"bg6_mk-J'JZF1d1
%%ljkb'XT,@nVoV[&GnShBZHl^&mNC)R+3eELn,*,5C69EcM@'MFR,$\:O(I5Poa<B&P^2T?'Io\Y!NqC4:*iXF>TP/!d,F-H',f/
%B"M5]EXka*C^X-!VV+2Uph;b5U&kL_$?c,PP^U1BVFoe9i37k>'.,NPH(4s<9Gn0U2J>iVSJt-T6jX<qg"Co=\BKn,Yi-ZiAdOrD
%>5_bZQS\;kQpf8Vr/=5H]ia3G<aThVRTbn%*][UP;VkY@BEt%$Y'U*^K+_&i)4XEV.Z\1"W3C*K_8#7'nF;e4o*.<]A.?2Lmlstl
%pT9D:c]a!;;KG,ul:3VoYUoN8i1]/Vn5;m??+\#NChT;L*9VP@3=gSCVCV5F@u"o;gG0bP3fo)*G;"eFfo\cr1#gsFPmEH&kg.)1
%>!oqRX1;U\maTCn*M)B>l913m1?eBVN5ea`+pj6X120+tjql(\_6STA"qPFe7%9!I,-.-EhEG),(BekTVY/T>#tdsiL(1=_EkE$C
%SL/I.OJH_Mkm[_Y1l\"P9jFaEc)_NOfESFJ5+0/3-U*7G#bS<+Mrncb7mTruhK?9-b]H=-C\RdpJ:>>5n?YX)Kr2LH18b>k0K.Ko
%hEEu-a2IuC#fNF\+-g8[,7DHA<6glDN/r!BSOu!5fhFHpf+9e/pTpFE#>W#3-];O\.KZUiJ3&a2!Y/VnOb[=2i35e8,A,j;\VR]'
%<Cso84l%BlYi]QGU\Cd:/qNh7^LN6XP)-=3UhiO_^2GPP2l@Z='Tu1:9ZLer%bF%cH=BsV:!l?uTnZelqPR<*%9k!M_Sp,Wpi,oc
%bbA["T6T0><YuE])^Z[A\fE2mboL.W>LEZFrZa6G3l]=\=]PN_;OB[.rT/;<8b:#o'F2.PRLS4bUq^.""jAT%icC]8Z("/qPGNHd
%hrOUN-$i=Pn6'Oolq6XFB!m<\>u;+%&U(3o"Qqouku:l>r=a!A;Nn3,bGA@W&r[F8M+tS#2kY$rCU=[=:_l^clu+kWZa*c93agP^
%Eg*[Yl3Ts<L3QsY(Cm<AI+A9kUK#V-6GaXD=?BHiHe-0g/2$jtGX00BKnS]B<s1O);13/174Or*FRV%RX=1R*[YRrhe'BQQXdR_B
%IZQV5IoO3/@,tFNK$(se>b$($QD7t(5thUua-r`,+2/%Qc=G?RM;ghq$YM6ZA71cN"Rs@0:`jidJH$V/C"j_2K&Q9PTDkG\L!;Ym
%rN<sV.!IU^8jPf7k_s=LC\1_5"#krDGReXb\/LAL<SLX.e(e-4"E!H<mUh(RcWH$@Z"'Ls5#I+g_H<gq]]7_'_^QR^^[8S>arR#f
%b>-6Tlu#-'mnn'b8:tW/_mLU2$;knag+8qq!3D)Y+`0O4;`'hAqPFWudo]*h<Qh22bJ?IGm);EmQoF(";Dc]Xk,@8QM:)T*UFA)B
%!ruZCAAs?M2C2%ReLEBsOi*"DcDo2)Vb;%bp<d!obr[mZK/?gn'oI6iIr'Yb-i>4>V%&6j6!M8#+-@\&f8;Eq!s7Vb@_Gt$-)=*&
%UeS2Iod,nU0+\d,;`MNIK%Usag#IP;q3PP^^+^)mB7f>spZ9sWSLe#g+m0cQ*(Wd`%^SnYh=(EaJpNOVVY%u]pY$KG@1Z55.pU[u
%>^V"bPlBX,oOr+:LGpoFre#J>F;#?_b8gEl75gqS=]>*"eRPB5[dhJS&Zm5ARZctGWtSb/rl>92QVQKm[f:]%52*_u6_5%+Z"#jB
%iin)<N\EYr0iYg<:iFm]SPrc;2@3T]Gg4)NYV)L;?4r!2*qX.hPbZc(bfZ6)#Zif9A/LYEKr-*HnN'01p_;o?3pB.NF>[?^C9^RP
%O)_<7B$\.>75cAaIcsNdhf6P7,Wlue8S/,$A9&:LD>B5+q_84L3]AV>llS;`s/H0B^,^l<"<g48*pc7P4_1Bn<i#7n(NXo/2,m69
%(O'$5bn>D=+$A"N.n+45U(F*QNnYigje)IGQ!dp#kco<e2<!#B$Q(J'NS^/'$XX9mephk?JU;+kYd@KnNG0A=PrP<q[Kl<*1sc+c
%h(>C97iHrm/s#q2=!^bBMHBZKAuYF5%^MlN8p;ef4Qs9Faq9TA'$K6g[kb!_mcA@AD*;Uq@'E_oRA9RaPA'sGX\<elh5aG5p3hKs
%lZD0*13h5B:A]IlQcQkq1]"-4o>'/(5-LAUV4W82Wr.2i<SH1Qi9/#O?W>g0Kc0"CpC6o0J"$E,q`k&6jelJBs8;ii%J]?uIer+%
%J,T2@s8;BckMQ:$O+6uie,+>RrTR+bq>GfNIsUk0TAT\1^]46'qfdPcO$EXT#TrFUI.uIcs7madqj[ThVI`hk~>
%AI9_PrivateDataEnd
